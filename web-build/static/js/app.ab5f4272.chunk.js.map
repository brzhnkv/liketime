{"version":3,"sources":["contexts/DialogContext.js","contexts/UsersContext.js","components/header/HomeScreenHeader.js","redux/counterSlice.js","redux/messagesSlice.js","redux/statusSlice.js","redux/saga/requests/messages.js","redux/saga/handlers/messages.js","redux/saga/requests/status.js","redux/saga/handlers/status.js","redux/saga/rootSaga.js","redux/store.js","components/utils/AddAccountDialog.js","contexts/StompContext.js","lib/stomp/Stomp.js","components/console/ConsoleLine.js","components/console/Console.js","components/console/ConsoleHeader.js","screens/TaskScreens/AdminScreen.js","screens/TaskScreens/FollowScreen.js","components/Task.js","screens/TaskScreens/LikeScreen.js","screens/HomeScreen.js","screens/LoginScreen.js","App.js"],"names":["DialogContext","React","createContext","UsersContext","UserIcon","props","name","LogoutIcon","HomeScreenHeader","useContext","users","setUsers","setVisible","useState","isLogoutActive","setIsLogoutActive","reorderStoredUsers","username","a","async","usersArray","index","findIndex","x","unshift","splice","AsyncStorage","setItem","JSON","stringify","getItem","usersStorage","parse","menuVisible","setMenuVisible","toggleMenu","renderMenuAction","icon","View","style","styles","menuActionWrapper","source","uri","profilePic","onPress","useEffect","length","navigation","navigate","title","titleContainer","accessoryRight","anchor","visible","onBackdropPress","placement","backdropStyle","backdrop","onSelect","slice","map","user","key","accessoryLeft","handleChangeAccount","disabled","axios","request","method","url","shift","handleLogout","StyleSheet","create","flexDirection","alignItems","logo","marginHorizontal","backgroundColor","display","counterSlice","createSlice","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","messages","statusMessages","logMessages","lastStatusMessage","getMessages","setMessages","receiveStatusMessage","push","receiveLogMessage","clearMessages","status","getStatus","setStatus","requestGetMessages","data","handleGetMessages","call","response","put","console","log","requestGetStatus","handleGetStatus","watcherSaga","takeLatest","type","sagaMiddleware","createSagaMiddleware","middleware","reducer","combineReducers","counter","counterReducer","messagesReducer","statusReducer","store","configureStore","getDefaultMiddleware","thunk","run","AddAccountDialog","setUsername","password","setPassword","handleCancel","Container","Title","Input","input","autoCapitalize","label","autoCorrect","onChangeText","text","wrapperStyle","wrapper","Button","post","then","alert","storeAdditionalUser","userProfilePic","token","catch","error","container","flex","justifyContent","borderBottomColor","borderBottomWidth","StompContext","Subscription","stomp","path","dispatch","watch","subscribe","message","newMessage","body","ConsoleLine","line","Text","width","textAlign","color","paddingLeft","Console","flatListRef","useRef","useSelector","flexGrow","renderItem","item","keyExtractor","toString","contentContainerStyle","ref","onContentSizeChange","current","scrollToEnd","ConsoleHeader","statusMessage","root","height","marginTop","AdminScreen","rxStomp","useDispatch","colorScheme","isLoading","isLoadingText","activate","setIsRunning","publish","destination","variant","size","tag","FollowScreen","textInput","marginVertical","Task","taskName","buttonName","setTag","placeholder","editedTag","replace","LikeScreen","colors","Tab","createBottomTabNavigator","HomeScreen","RxStomp","isConnected","setIsConnected","deactivate","configure","brokerURL","connectHeaders","sessionId","appendMissingNULLonIncoming","forceBinaryWSFrames","debug","str","reconnectDelay","connectionTimeout","StompConfig","subscriptionStatus","subscriptionLog","setState","subscription","connectionState$","RxStompState","OPEN","unsubscribe","dispatchStatus","newStatusMessage","dispatchLog","newLogMessage","Provider","StatusBar","barStyle","dialog","Navigator","Screen","LoginScreen","storeInitialUser","titleText","TextInput","secureTextEntry","fontSize","fontWeight","margin","borderColor","borderWidth","Stack","createStackNavigator","theme","extendTheme","brand","900","800","700","App","appLoaded","setAppLoaded","isLoggedIn","setIsLoggedIn","initialRoute","setInitialRoute","currentUser","setLoggedInUsername","setUserProfilePic","setToken","getLoggedInUser","setCurrentUserData","jsonData","storeUser","userData","storeLoggedInUser","storeNewUser","d","getUsers","icons","EvaIconsPack","eva","NavigationContainer","initialRouteName","options","header","loggedInUsername","startAsync","onFinish","onError"],"mappings":"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","file":"static/js/app.ab5f4272.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst DialogContext = React.createContext(null);\r\n\r\nexport default DialogContext;\r\n","import React from \"react\";\r\n\r\nconst UsersContext = React.createContext(null);\r\n\r\nexport default UsersContext;\r\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport {\r\n  Avatar,\r\n  Icon,\r\n  MenuItem,\r\n  OverflowMenu,\r\n  Text,\r\n  TopNavigation,\r\n  TopNavigationAction,\r\n} from \"@ui-kitten/components\";\r\nimport axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport DialogContext from \"../../contexts/DialogContext\";\r\nimport UsersContext from \"../../contexts/UsersContext\";\r\n\r\nconst UserIcon = (props) => <Icon {...props} name=\"person-add\" />;\r\nconst LogoutIcon = (props) => <Icon {...props} name=\"log-out\" />;\r\n\r\nexport const HomeScreenHeader = () => {\r\n  //const [rxStomp] = useContext(StompContext);\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [visible, setVisible] = useContext(DialogContext);\r\n\r\n  const [isLogoutActive, setIsLogoutActive] = useState(true);\r\n\r\n  const handleAddAccount = () => {\r\n    toggleMenu();\r\n    setVisible(true);\r\n  };\r\n\r\n  const reorderStoredUsers = async (username) => {\r\n    const usersArray = [...users];\r\n    const index = usersArray.findIndex((x) => x.username === username);\r\n    usersArray.unshift(usersArray.splice(index, 1)[0]);\r\n    try {\r\n      await AsyncStorage.setItem(\"users\", JSON.stringify(usersArray));\r\n    } catch (e) {}\r\n    try {\r\n      const usersStorage = JSON.parse(await AsyncStorage.getItem(\"users\"));\r\n      setUsers(usersStorage);\r\n    } catch (e) {}\r\n  };\r\n\r\n  const handleChangeAccount = async (user) => {\r\n    toggleMenu();\r\n    //await rxStomp.deactivate();\r\n    await reorderStoredUsers(user);\r\n    //await rxStomp.activate();\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    toggleMenu();\r\n    const username = users[0].username;\r\n    setIsLogoutActive(false);\r\n    // await rxStomp.deactivate();\r\n    axios.request({\r\n      method: \"DELETE\",\r\n      url: `http://localhost:5000/api/v1/user/${username}`,\r\n    });\r\n\r\n    const usersArray = [...users];\r\n    usersArray.shift();\r\n\r\n    try {\r\n      await AsyncStorage.setItem(\"users\", JSON.stringify(usersArray));\r\n    } catch (e) {}\r\n    try {\r\n      const usersStorage = JSON.parse(await AsyncStorage.getItem(\"users\"));\r\n      setUsers(usersStorage);\r\n    } catch (e) {}\r\n    //await rxStomp.activate();\r\n    setIsLogoutActive(true);\r\n  };\r\n\r\n  const [menuVisible, setMenuVisible] = React.useState(false);\r\n\r\n  const toggleMenu = () => {\r\n    setMenuVisible(!menuVisible);\r\n  };\r\n\r\n  const renderMenuAction = () => (\r\n    <TopNavigationAction\r\n      icon={() => (\r\n        <View style={styles.menuActionWrapper}>\r\n          <img // here wast Avatar to show image\r\n            //defaultSource={{ uri: \"/assets/icon.png\" }}\r\n            source={{ uri: users[0].profilePic }}\r\n          />\r\n          <Text //style={styles.text}\r\n          >\r\n            {users[0].username}\r\n          </Text>\r\n        </View>\r\n      )}\r\n      onPress={toggleMenu}\r\n    ></TopNavigationAction>\r\n  );\r\n\r\n  const renderOverflowMenuAction = () => (\r\n    <OverflowMenu\r\n      anchor={renderMenuAction}\r\n      visible={menuVisible}\r\n      onBackdropPress={toggleMenu}\r\n      placement={\"bottom end\"}\r\n      backdropStyle={styles.backdrop}\r\n      onSelect={toggleMenu}\r\n    >\r\n      {users.slice(1).map((user) => {\r\n        return (\r\n          <MenuItem\r\n            key={user.username}\r\n            accessoryLeft={() => <Avatar source={{ uri: user.profilePic }} />}\r\n            title={user.username}\r\n            onPress={(title) => handleChangeAccount(title)}\r\n          ></MenuItem>\r\n        );\r\n      })}\r\n      <MenuItem\r\n        accessoryLeft={UserIcon}\r\n        title=\"Добавить аккаунт\"\r\n        onPress={() => handleAddAccount()}\r\n      />\r\n      <MenuItem\r\n        accessoryLeft={LogoutIcon}\r\n        title=\"Выйти из системы\"\r\n        disabled={!isLogoutActive}\r\n        onPress={() => handleLogout()}\r\n      />\r\n    </OverflowMenu>\r\n  );\r\n\r\n  const renderTitle = (props) => (\r\n    <View style={styles.titleContainer}>\r\n      {/*  <Avatar style={styles.logo} source={require(\"../../assets/icon.png\")} /> */}\r\n      <Text {...props}>LikeTime</Text>\r\n    </View>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!users.length) navigation.navigate(\"Home\");\r\n  }, [users]);\r\n\r\n  return (\r\n    <TopNavigation\r\n      title={renderTitle}\r\n      accessoryRight={renderOverflowMenuAction}\r\n    />\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  titleContainer: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n  logo: {\r\n    marginHorizontal: 16,\r\n  },\r\n  backdrop: {\r\n    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n  },\r\n  menuActionWrapper: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"flex-end\",\r\n  },\r\n});\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\nexport default counterSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const messages = createSlice({\r\n  name: \"messages\",\r\n  initialState: {\r\n    statusMessages: [],\r\n    logMessages: [],\r\n    lastStatusMessage: \"\",\r\n  },\r\n  reducers: {\r\n    getMessages() {},\r\n    setMessages(state, action) {\r\n      const { statusMessages, logMessages } = action.payload;\r\n      return {\r\n        ...state,\r\n        statusMessages,\r\n        logMessages,\r\n        lastStatusMessage: statusMessages[statusMessages.length - 1],\r\n      };\r\n    },\r\n\r\n    receiveStatusMessage: (state, action) => {\r\n      ({\r\n        ...state,\r\n        statusMessages: state.statusMessages.push(action.payload),\r\n      });\r\n      state.lastStatusMessage =\r\n        state.statusMessages[state.statusMessages.length - 1];\r\n    },\r\n\r\n    receiveLogMessage: (state, action) => {\r\n      ({\r\n        ...state,\r\n        logMessages: state.logMessages.push(action.payload),\r\n      });\r\n    },\r\n    clearMessages() {\r\n      return {\r\n        statusMessages: [],\r\n        logMessages: [],\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const {\r\n  getMessages,\r\n  setMessages,\r\n  receiveStatusMessage,\r\n  receiveLogMessage,\r\n  clearMessages,\r\n} = messages.actions;\r\n\r\nexport default messages.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const status = createSlice({\r\n  name: \"status\",\r\n  initialState: {\r\n    status: false,\r\n  },\r\n  reducers: {\r\n    getStatus() {},\r\n    setStatus(state, action) {\r\n      const { status } = action.payload;\r\n      return {\r\n        ...state,\r\n        status: status,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nexport const { getStatus, setStatus } = status.actions;\r\n\r\nexport default status.reducer;\r\n","import axios from \"axios\";\r\n\r\nexport function requestGetMessages(username) {\r\n  return axios.request({\r\n    method: \"POST\",\r\n    url: \"http://localhost:5000/api/v1/user/messages\",\r\n    data: { username: username },\r\n  });\r\n}\r\n","import { call, put } from \"redux-saga/effects\";\r\nimport { setMessages } from \"../../messagesSlice\";\r\nimport { requestGetMessages } from \"../requests/messages\";\r\n\r\nexport function* handleGetMessages(action) {\r\n  try {\r\n    const { payload } = action;\r\n    const { username } = payload;\r\n    const response = yield call(requestGetMessages, username);\r\n    const { data } = response;\r\n    yield put(setMessages({ ...data }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport function requestGetStatus(username) {\r\n  return axios.request({\r\n    method: \"POST\",\r\n    url: \"http://localhost:5000/api/v1/user/status\",\r\n    data: { username: username },\r\n  });\r\n}\r\n","import { call, put } from \"redux-saga/effects\";\r\nimport { setStatus } from \"../../statusSlice\";\r\nimport { requestGetStatus } from \"../requests/status\";\r\n\r\nexport function* handleGetStatus(action) {\r\n  try {\r\n    const { payload } = action;\r\n    const { username } = payload;\r\n    const response = yield call(requestGetStatus, username);\r\n    const { data } = response;\r\n    yield put(setStatus({ ...data }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n","import { takeLatest } from \"redux-saga/effects\";\r\nimport { getMessages } from \"../messagesSlice\";\r\nimport { getStatus } from \"../statusSlice\";\r\nimport { handleGetMessages } from \"./handlers/messages\";\r\nimport { handleGetStatus } from \"./handlers/status\";\r\n\r\nexport function* watcherSaga() {\r\n  yield takeLatest(getMessages.type, handleGetMessages);\r\n  yield takeLatest(getStatus.type, handleGetStatus);\r\n}\r\n","import {\r\n  configureStore,\r\n  combineReducers,\r\n  getDefaultMiddleware,\r\n} from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport counterReducer from \"./counterSlice\";\r\n\r\nimport { watcherSaga } from \"./saga/rootSaga\";\r\nimport messagesReducer from \"./messagesSlice\";\r\nimport statusReducer from \"./statusSlice\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleware = [sagaMiddleware];\r\n\r\nconst reducer = combineReducers({\r\n  counter: counterReducer,\r\n\r\n  messages: messagesReducer,\r\n  status: statusReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer,\r\n  middleware: [...getDefaultMiddleware({ thunk: false }), ...middleware],\r\n});\r\n\r\nsagaMiddleware.run(watcherSaga);\r\n\r\nexport default store;\r\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport axios from \"axios\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport Dialog from \"react-native-dialog\";\r\nimport UsersContext from \"../../contexts/UsersContext\";\r\n\r\nexport default function AddAccountDialog({ visible, setVisible }) {\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const storeAdditionalUser = async (user) => {\r\n    const usersArray = [...users];\r\n    usersArray.push(user);\r\n    const index = usersArray.findIndex((x) => x.username === user.username);\r\n    usersArray.unshift(usersArray.splice(index, 1)[0]);\r\n    try {\r\n      await AsyncStorage.setItem(\"users\", JSON.stringify(usersArray));\r\n    } catch (e) {\r\n      alert(\"error1\");\r\n    }\r\n    try {\r\n      const usersStorage = JSON.parse(await AsyncStorage.getItem(\"users\"));\r\n      setUsers(usersStorage);\r\n    } catch (e) {\r\n      alert(\"error2\");\r\n    }\r\n  };\r\n\r\n  const showDialog = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    axios\r\n      .post(\"http://localhost:5000/api/v1/user/\", {\r\n        username: username,\r\n        password: password,\r\n      })\r\n      .then(function (response) {\r\n        console.log(response);\r\n        const { data } = response;\r\n\r\n        const user = {\r\n          username: data.username,\r\n          profilePic: data.userProfilePic,\r\n          token: data.token,\r\n        };\r\n\r\n        storeAdditionalUser(user);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n\r\n    setVisible(false);\r\n  };\r\n\r\n  return (\r\n    <Dialog.Container visible={visible} onBackdropPress={handleCancel}>\r\n      <Dialog.Title>Добавление аккаунта</Dialog.Title>\r\n      <Dialog.Input\r\n        style={styles.input}\r\n        autoCapitalize=\"none\"\r\n        label=\"Имя пользователя:\"\r\n        autoCorrect={false}\r\n        value={username}\r\n        onChangeText={(text) => {\r\n          setUsername(text);\r\n        }}\r\n      ></Dialog.Input>\r\n\r\n      <Dialog.Input\r\n        style={styles.input}\r\n        wrapperStyle={styles.wrapper}\r\n        autoCapitalize=\"none\"\r\n        autoCorrect={false}\r\n        label=\"Пароль:\"\r\n        value={password}\r\n        onChangeText={(text) => {\r\n          setPassword(text);\r\n        }}\r\n      />\r\n      <Dialog.Button label=\"Отмена\" onPress={handleCancel} />\r\n      <Dialog.Button label=\"Войти\" onPress={handleLogin} />\r\n    </Dialog.Container>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  input: {\r\n    borderBottomColor: \"black\",\r\n    borderBottomWidth: 0.8,\r\n  },\r\n  wrapper: {},\r\n});\r\n","import React from \"react\";\r\n\r\nconst StompContext = React.createContext(null);\r\n\r\nexport default StompContext;\r\n","export const StompConfig = (username, token) => {\r\n  return {\r\n    brokerURL: \"wss://instanext-server.herokuapp.com/ws\", //production\r\n    //brokerURL: \"ws://192.168.100.50:5000/ws\", //home\r\n    //brokerURL: \"ws://192.168.0.50:5000/ws\", //office\r\n    connectHeaders: { sessionId: username, token: token },\r\n    appendMissingNULLonIncoming: true,\r\n    forceBinaryWSFrames: true,\r\n    debug: function (str) {\r\n      console.log(\"STOMP: \" + str);\r\n    },\r\n    reconnectDelay: 20000,\r\n    connectionTimeout: 1000,\r\n  };\r\n};\r\n\r\nexport const Subscription = (stomp, username, path, dispatch) => {\r\n  const subscription = stomp\r\n    .watch(\"/user/\" + username + \"/queue/\" + path)\r\n    .subscribe(function (message) {\r\n      const payload = JSON.parse(message.body);\r\n      const newMessage = payload.status;\r\n      dispatch(newMessage);\r\n    });\r\n\r\n  return subscription;\r\n};\r\n","import React from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\n\r\nexport const ConsoleLine = ({ message, index }) => {\r\n  return (\r\n    <View style={styles.line}>\r\n      <Text style={styles.index}>{index + 1}</Text>\r\n      <Text style={styles.message}>{message}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  line: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n  index: {\r\n    width: 50,\r\n    textAlign: \"right\",\r\n    color: \"#595959\",\r\n  },\r\n  message: {\r\n    paddingLeft: 20,\r\n    color: \"#d6d6d6\",\r\n  },\r\n});\r\n","import React, { useRef } from \"react\";\r\nimport { FlatList } from \"react-native-gesture-handler\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ConsoleLine } from \"./ConsoleLine\";\r\n\r\nexport const Console = () => {\r\n  const flatListRef = useRef(null);\r\n\r\n  const { logMessages } = useSelector((state) => state.messages);\r\n  const renderItem = ({ item, index }) => (\r\n    <ConsoleLine message={item} index={index} />\r\n  );\r\n\r\n  return (\r\n    <FlatList\r\n      style={{\r\n        width: \"100%\",\r\n        flexGrow: 0,\r\n        backgroundColor: \"#222222\",\r\n      }}\r\n      data={logMessages}\r\n      renderItem={renderItem}\r\n      keyExtractor={(item, index) => index.toString()}\r\n      contentContainerStyle={\r\n        {\r\n          // flexDirection: \"column-reverse\",\r\n        }\r\n      }\r\n      // stickyHeaderIndices={[0]}\r\n      // ListHeaderComponent={<Header />}\r\n      // ListFooterComponent={<Footer statusMessage={\"dfdfkdlfkjsl\"} />}\r\n      ref={flatListRef}\r\n      onContentSizeChange={() => {\r\n        flatListRef.current.scrollToEnd();\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport const ConsoleHeader = ({ statusMessage }) => {\r\n  const { lastStatusMessage } = useSelector((state) => state.messages);\r\n  return (\r\n    <View style={styles.root}>\r\n      <Text style={styles.title}>{lastStatusMessage}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"black\",\r\n    height: 50,\r\n    width: \"100%\",\r\n  },\r\n  title: {\r\n    color: \"white\",\r\n    paddingLeft: 22,\r\n  },\r\n});\r\n","import { Button } from \"native-base\";\r\nimport React, { useContext } from \"react\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Console } from \"../../components/console/Console\";\r\nimport { ConsoleHeader } from \"../../components/console/ConsoleHeader\";\r\nimport StompContext from \"../../contexts/StompContext\";\r\nimport UsersContext from \"../../contexts/UsersContext\";\r\nimport { clearMessages } from \"../../redux/messagesSlice\";\r\n\r\nconst AdminScreen = () => {\r\n  const [rxStomp] = useContext(StompContext);\r\n  const [users] = useContext(UsersContext);\r\n\r\n  const { status } = useSelector((state) => state.status);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleTest = async () => {\r\n    dispatch(clearMessages());\r\n    await rxStomp.activate();\r\n    setIsRunning(true);\r\n    const data = {\r\n      username: users[0].username,\r\n      token: users[0].token,\r\n    };\r\n\r\n    await rxStomp.publish({\r\n      destination: \"/app/test\",\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  const newLikeByTag = () => {\r\n    const data = {\r\n      username: users[0].username,\r\n      token: users[0].token,\r\n      tag: \"onedayinperu\",\r\n    };\r\n\r\n    rxStomp.publish({\r\n      destination: \"/app/newlike\",\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <Button\r\n        colorScheme=\"emerald\"\r\n        isLoading={status}\r\n        isLoadingText=\"в работе\"\r\n        onPress={handleTest}\r\n        variant=\"outline\"\r\n        size={\"sm\"}\r\n      >\r\n        Test\r\n      </Button>\r\n\r\n      <Button\r\n        colorScheme=\"emerald\"\r\n        size={\"sm\"}\r\n        variant=\"outline\"\r\n        onPress={newLikeByTag}\r\n      >\r\n        1212\r\n      </Button>\r\n\r\n      <ConsoleHeader />\r\n      <Console />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    marginTop: 10,\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n});\r\n\r\nexport default AdminScreen;\r\n","import React, { useContext } from \"react\";\r\nimport { Button, StyleSheet, View } from \"react-native\";\r\nimport { Console } from \"../../components/console/Console\";\r\nimport { ConsoleHeader } from \"../../components/console/ConsoleHeader\";\r\nimport StompContext from \"../../contexts/StompContext\";\r\nimport UsersContext from \"../../contexts/UsersContext\";\r\n\r\nconst FollowScreen = () => {\r\n  const [rxStomp] = useContext(StompContext);\r\n  const [users] = useContext(UsersContext);\r\n  const newLikeByTag = () => {\r\n    const data = {\r\n      username: users[0].username,\r\n      token: users[0].token,\r\n      tag: \"onedayinperu\",\r\n    };\r\n\r\n    rxStomp.publish({\r\n      destination: \"/app/newlike\",\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <Button title=\"1212\" onPress={newLikeByTag} />\r\n      <ConsoleHeader />\r\n      <Console />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    marginTop: 10,\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n});\r\n\r\nexport default FollowScreen;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Button, StyleSheet, View } from \"react-native\";\r\nimport { TextInput } from \"react-native-gesture-handler\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport StompContext from \"../contexts/StompContext\";\r\nimport UsersContext from \"../contexts/UsersContext\";\r\nimport { clearMessages } from \"../redux/messagesSlice\";\r\n\r\nconst Task = ({ taskName, destination, buttonName }) => {\r\n  const [rxStomp] = useContext(StompContext);\r\n  const [users] = useContext(UsersContext);\r\n\r\n  const [tag, setTag] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n  const { status } = useSelector((state) => state.status);\r\n\r\n  const handleRunTask = async () => {\r\n    if (tag === \"\") alert(\"Тег не может быть пустым!\");\r\n    let editedTag = tag;\r\n    editedTag = editedTag.replace(\"#\", \"\");\r\n\r\n    dispatch(clearMessages());\r\n    await rxStomp.activate();\r\n\r\n    const data = {\r\n      username: users[0].username,\r\n      token: users[0].token,\r\n      tag: editedTag,\r\n    };\r\n\r\n    await rxStomp.publish({\r\n      destination: destination,\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <TextInput\r\n        style={styles.textInput}\r\n        autoCapitalize=\"none\"\r\n        autoCorrect={false}\r\n        textAlign=\"center\"\r\n        value={tag}\r\n        placeholder={taskName}\r\n        onChangeText={(text) => setTag(text)}\r\n      />\r\n      <Button\r\n        title={!buttonName ? \"Старт\" : buttonName}\r\n        disabled={status}\r\n        onPress={handleRunTask}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  textInput: {\r\n    height: 40,\r\n    borderBottomColor: \"gray\",\r\n    borderBottomWidth: 1,\r\n    width: \"80%\",\r\n    marginVertical: 10,\r\n  },\r\n});\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport { Console } from \"../../components/console/Console\";\r\nimport { ConsoleHeader } from \"../../components/console/ConsoleHeader\";\r\nimport Task from \"../../components/Task\";\r\n\r\nconst LikeScreen = () => {\r\n  return (\r\n    <View style={styles.root}>\r\n      <Task taskName=\"Лайк\" destination=\"/app/like\" />\r\n      <Task taskName=\"Сохранение\" destination=\"/app/save\" />\r\n      <Task taskName=\"Лайк + сохранение\" destination=\"/app/likeandsave\" />\r\n      <Task taskName=\"Самолет\" destination=\"/app/sendmediatogroup\" />\r\n\r\n      <ConsoleHeader />\r\n      <Console />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    marginTop: 10,\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n});\r\n\r\nexport default LikeScreen;\r\n","import { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\nimport { RxStomp, RxStompState } from \"@stomp/rx-stomp\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { StatusBar, StyleSheet, Text, View } from \"react-native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport AddAccountDialog from \"../components/utils/AddAccountDialog\";\r\nimport DialogContext from \"../contexts/DialogContext\";\r\nimport StompContext from \"../contexts/StompContext\";\r\nimport UsersContext from \"../contexts/UsersContext\";\r\nimport {\r\n  getMessages,\r\n  receiveLogMessage,\r\n  receiveStatusMessage,\r\n} from \"../redux/messagesSlice\";\r\nimport { getStatus } from \"../redux/statusSlice\";\r\nimport { StompConfig, Subscription } from \"./../lib/stomp/Stomp\";\r\nimport AdminScreen from \"./TaskScreens/AdminScreen\";\r\nimport FollowScreen from \"./TaskScreens/FollowScreen\";\r\nimport LikeScreen from \"./TaskScreens/LikeScreen\";\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nconst HomeScreen = ({ navigation }) => {\r\n  const [rxStomp, setRxStomp] = useState(new RxStomp());\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [visible, setVisible] = useContext(DialogContext);\r\n\r\n  const username = users[0].username;\r\n  const token = users[0].token;\r\n\r\n  const { status } = useSelector((state) => state.status);\r\n\r\n  useEffect(() => {\r\n    status === true ? rxStomp.activate() : rxStomp.deactivate();\r\n  }, [status]);\r\n\r\n  rxStomp.configure(StompConfig(username, token));\r\n\r\n  const [state, setState] = useState();\r\n  useEffect(() => {\r\n    const subscription = rxStomp.connectionState$.subscribe(setState);\r\n    setIsConnected(state === RxStompState.OPEN);\r\n\r\n    return () => subscription.unsubscribe();\r\n  });\r\n\r\n  let subscriptionStatus;\r\n  let subscriptionLog;\r\n\r\n  const dispatch = useDispatch();\r\n  const dispatchStatus = (newStatusMessage) => {\r\n    dispatch(receiveStatusMessage(newStatusMessage));\r\n    dispatch(getStatus({ username: users[0].username }));\r\n  };\r\n  const dispatchLog = (newLogMessage) =>\r\n    dispatch(receiveLogMessage(newLogMessage));\r\n\r\n  useEffect(() => {\r\n    dispatch(getMessages({ username: users[0].username }));\r\n    dispatch(getStatus({ username: users[0].username }));\r\n\r\n    subscriptionStatus = Subscription(\r\n      rxStomp,\r\n      username,\r\n      \"status\",\r\n      dispatchStatus\r\n    );\r\n    subscriptionLog = Subscription(rxStomp, username, \"log\", dispatchLog);\r\n\r\n    return () => {\r\n      subscriptionStatus.unsubscribe();\r\n      subscriptionLog.unsubscribe();\r\n    };\r\n  }, [users]);\r\n\r\n  return (\r\n    <StompContext.Provider value={[rxStomp, isConnected, setIsConnected]}>\r\n      <View style={styles.root}>\r\n        <StatusBar backgroundColor={colors.white} barStyle=\"dark-content\" />\r\n        <AddAccountDialog\r\n          visible={visible}\r\n          setVisible={setVisible}\r\n          style={styles.dialog}\r\n        />\r\n        {false ? (\r\n          <Text>Соединение с сервером не установлено...</Text>\r\n        ) : (\r\n          <Tab.Navigator>\r\n            <Tab.Screen name=\"Лайки\">\r\n              {(props) => (\r\n                <LikeScreen\r\n                  {...props}\r\n                  isConnected={isConnected}\r\n                  visible={visible}\r\n                  setVisible={setVisible}\r\n                />\r\n              )}\r\n            </Tab.Screen>\r\n            <Tab.Screen name=\"Подписки\">\r\n              {(props) => <FollowScreen {...props} />}\r\n            </Tab.Screen>\r\n            {\r\n              <Tab.Screen name=\"Admin\">\r\n                {(props) => <AdminScreen {...props} />}\r\n              </Tab.Screen>\r\n            }\r\n          </Tab.Navigator>\r\n        )}\r\n      </View>\r\n    </StompContext.Provider>\r\n  );\r\n};\r\n\r\nexport default HomeScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: colors.themeColor,\r\n  },\r\n});\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, StyleSheet, Text, TextInput, View } from \"react-native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport UsersContext from \"../contexts/UsersContext\";\r\nimport axios from \"axios\";\r\n\r\nconst LoginScreen = ({ navigation }) => {\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleLogin = () => {\r\n    axios\r\n      .post(\"http://localhost:5000/api/v1/user/\", {\r\n        username: username,\r\n        password: password,\r\n      })\r\n      .then(function (response) {\r\n        console.log(response);\r\n        const { data } = response;\r\n\r\n        const user = {\r\n          username: data.username,\r\n          profilePic: data.userProfilePic,\r\n          token: data.token,\r\n        };\r\n\r\n        storeInitialUser(user);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const storeInitialUser = async (user) => {\r\n    const usersArray = [];\r\n    usersArray.push(user);\r\n    try {\r\n      await AsyncStorage.setItem(\"users\", JSON.stringify(usersArray));\r\n    } catch (e) {}\r\n    try {\r\n      const usersStorage = JSON.parse(await AsyncStorage.getItem(\"users\"));\r\n      setUsers(usersStorage);\r\n    } catch (e) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (users.length) navigation.navigate(\"Home\");\r\n  }, [users]);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.titleText}>Авторизация</Text>\r\n      <TextInput\r\n        style={styles.textInput}\r\n        placeholder={\"Имя пользователя\"}\r\n        value={username}\r\n        onChangeText={(text) => {\r\n          setUsername(text);\r\n        }}\r\n      />\r\n      <TextInput\r\n        style={styles.textInput}\r\n        placeholder={\"Пароль\"}\r\n        secureTextEntry={true}\r\n        value={password}\r\n        onChangeText={(text) => {\r\n          setPassword(text);\r\n        }}\r\n      />\r\n      <Button title=\"Войти\" onPress={handleLogin} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default LoginScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n  },\r\n  titleText: {\r\n    fontSize: 30,\r\n    fontWeight: \"bold\",\r\n  },\r\n  textInput: {\r\n    margin: 20,\r\n    height: 40,\r\n    borderColor: \"red\",\r\n    borderWidth: 1,\r\n    width: \"80%\",\r\n  },\r\n});\r\n","import * as eva from \"@eva-design/eva\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { ApplicationProvider, IconRegistry } from \"@ui-kitten/components\";\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\nimport AppLoading from \"expo-app-loading\";\nimport { extendTheme, NativeBaseProvider } from \"native-base\";\nimport React, { useState } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { HomeScreenHeader } from \"./components/header/HomeScreenHeader\";\nimport DialogContext from \"./contexts/DialogContext\";\nimport UsersContext from \"./contexts/UsersContext\";\nimport store from \"./redux/store\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport LoginScreen from \"./screens/LoginScreen\";\n\nconst Stack = createStackNavigator();\n\nconst newColorTheme = {\n  brand: {\n    900: \"#8287af\",\n    800: \"#7c83db\",\n    700: \"#b3bef6\",\n  },\n};\nconst theme = extendTheme({ colors: newColorTheme });\n\nexport default function App() {\n  const [appLoaded, setAppLoaded] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [initialRoute, setInitialRoute] = useState(\"\");\n  const [currentUser, setLoggedInUsername] = useState(\"\");\n  const [userProfilePic, setUserProfilePic] = useState(\"\");\n  const [token, setToken] = useState(\"\");\n  const [users, setUsers] = useState([]);\n  const [visible, setVisible] = useState(false);\n\n  const getLoggedInUser = async () => {\n    // getCurrentUser\n    try {\n      const username = await AsyncStorage.getItem(\"@logged_in_user\"); // @current_user\n      if (username == null) {\n        setInitialRoute(\"Login\");\n      } else {\n        setIsLoggedIn(true);\n        setCurrentUserData(username);\n        // setUsers((users) => ({ username }, { ...users }));\n        let obj = { username: \"kflkl\", profilePic: \"dffd\" };\n        // setUsers(obj);\n        setInitialRoute(\"Home\");\n      }\n    } catch (e) {\n      alert(\"error getting logged in user\");\n    }\n  };\n\n  const setCurrentUserData = async (username) => {\n    try {\n      const jsonData = await AsyncStorage.getItem(username);\n      const data = JSON.parse(jsonData);\n      setToken(data.token); // setCurrentUserToken\n      setLoggedInUsername(username); // setCurrentUsername\n      setUserProfilePic(data.profilePic); // setCurrentUserProfilePicture\n    } catch {}\n  };\n\n  const storeUser = async (username, userData) => {\n    try {\n      let data = JSON.stringify(userData);\n      await AsyncStorage.setItem(username, data);\n    } catch (e) {\n      // saving error\n    }\n    storeLoggedInUser(username);\n  };\n  // storeCurrentUser\n  const storeLoggedInUser = async (username) => {\n    try {\n      await AsyncStorage.setItem(\"@logged_in_user\", username);\n    } catch (e) {\n      // error\n    }\n    await getLoggedInUser();\n  };\n  const storeNewUser = async (username, userData) => {\n    try {\n      let data = JSON.stringify(userData);\n      await AsyncStorage.setItem(username, data);\n    } catch (e) {}\n    try {\n      await AsyncStorage.setItem(\"@logged_in_user\", username);\n    } catch (e) {}\n    try {\n      d = await AsyncStorage.getItem(\"@logged_in_user\");\n    } catch (e) {}\n    await setLoggedInUsername(d);\n    await setCurrentUserData(d);\n  };\n  // START debug //\n\n  const getAllUsersExceptCurrentUser = async () => {\n    let keys = [];\n    try {\n      keys = await AsyncStorage.getAllKeys();\n    } catch (e) {\n      // read key error\n    }\n    let currentUser;\n    console.log(keys);\n    const index = keys.indexOf(\"@logged_in_user\");\n    if (index > -1) {\n      keys.splice(index, 1);\n    }\n    const index2 = keys.indexOf(currentUser);\n    console.log(index2);\n    if (index2 > -1) {\n      keys.splice(index2, 1);\n    }\n    let obj = [];\n    let profilePic;\n    await Promise.all(\n      keys.map(async (k, i) => {\n        try {\n          const jsonData = await AsyncStorage.getItem(k);\n          const data = JSON.parse(jsonData);\n          profilePic = data.profilePic;\n        } catch (e) {\n          console.log(\"failed loading profile picture\");\n        }\n        console.log(\"prof pic: \", profilePic);\n        console.log(\"key \" + i + \": \" + k);\n        obj.push({ username: k, profilePic: profilePic });\n      })\n    );\n    obj.map((i) => {\n      console.log(i.username, i.profilePic);\n    });\n    //setUsers((state) => [...state, ...obj]);\n\n    //setUsers((state) => [obj2, ...state]);\n  };\n\n  const getUsers = async () => {\n    try {\n      const users = JSON.parse(await AsyncStorage.getItem(\"users\"));\n      if (!users.length) {\n        setInitialRoute(\"Login\");\n      } else {\n        setIsLoggedIn(true);\n        setUsers(users);\n        setInitialRoute(\"Home\");\n      }\n    } catch (e) {\n      setInitialRoute(\"Login\");\n    }\n  };\n\n  const loadApp = async () => {\n    // const images = [require('./assets/snack-icon.png')];\n\n    /*  const cacheImages = images.map(image => {\n      return Asset.fromModule(image).downloadAsync();\n    });  */\n    return getUsers();\n  };\n\n  if (!appLoaded) {\n    return (\n      <AppLoading\n        startAsync={loadApp}\n        onFinish={() => {\n          //  getAllUsersExceptCurrentUser();\n          setAppLoaded(true);\n        }}\n        onError={() => {}}\n      />\n    );\n  }\n\n  return (\n    <Provider store={store}>\n      <IconRegistry icons={EvaIconsPack} />\n      <ApplicationProvider {...eva} theme={eva.light}>\n        <NativeBaseProvider theme={theme}>\n          <UsersContext.Provider value={[users, setUsers]}>\n            <DialogContext.Provider value={[visible, setVisible]}>\n              <NavigationContainer>\n                <Stack.Navigator initialRouteName={initialRoute}>\n                  <Stack.Screen\n                    name=\"Home\"\n                    options={({ navigation }) => {\n                      return {\n                        header: () => <HomeScreenHeader />,\n                      };\n                    }}\n                  >\n                    {(props) => (\n                      <HomeScreen\n                        {...props}\n                        isLoggedIn={isLoggedIn}\n                        loggedInUsername={currentUser}\n                        userProfilePic={userProfilePic}\n                        token={token}\n                        storeNewUser={storeNewUser}\n                        storeUser={storeUser}\n                      />\n                    )}\n                  </Stack.Screen>\n                  <Stack.Screen name=\"Login\">\n                    {(props) => <LoginScreen {...props} />}\n                  </Stack.Screen>\n                </Stack.Navigator>\n              </NavigationContainer>\n            </DialogContext.Provider>\n          </UsersContext.Provider>\n        </NativeBaseProvider>\n      </ApplicationProvider>\n    </Provider>\n  );\n}\n"],"sourceRoot":""}