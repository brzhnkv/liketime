{"version":3,"sources":["contexts/StompContext.js","contexts/UsersContext.js","components/Tasks.js","components/utils/AddAccountDialog.js","contexts/DialogContext.js","screens/Homepage2.js","components/Task.js","screens/TaskScreens/LikeScreen.js","screens/TaskScreens/ExtraScreen.js","screens/TaskScreens/FollowScreen.js","screens/HomeScreen.js","screens/LoginScreen.js","components/HeaderButton.js","styles/theme.js","App.js"],"names":["StompContext","React","createContext","UsersContext","StyleSheet","create","AddAccountDialog","visible","setVisible","useContext","rxStomp","users","setUsers","useState","username","setUsername","password","setPassword","loginButtonPressed","setLoginButtonPressed","useEffect","watch","subscribe","message","payload","JSON","parse","body","console","log","data","token","user","a","async","usersArray","push","index","findIndex","x","unshift","splice","AsyncStorage","setItem","stringify","alert","getItem","usersStorage","storeAdditionalUser","profilePic","userProfilePic","login","handleCancel","publish","destination","Container","onBackdropPress","Title","Input","style","styles","input","autoCapitalize","label","autoCorrect","value","onChangeText","text","wrapperStyle","wrapper","Button","onPress","container","flex","backgroundColor","alignItems","justifyContent","borderBottomColor","borderBottomWidth","DialogContext","colors","createBottomTabNavigator","root","marginTop","dialog","header","toolbar","padding","flexDirection","textInput","height","borderColor","borderWidth","width","logo","marginVertical","Task","taskName","buttonName","tag","setTag","View","textAlign","placeholder","title","logsView","alignSelf","paddingHorizontal","inputWrapper","LikeScreen","logFromServer","statusMessage","Text","ExtraScreen","FollowScreen","Tab","HomeScreen","navigation","isConnected","setIsConnected","setLogFromServer","setStatusMessage","rxStompConfig","brokerURL","connectHeaders","sessionId","appendMissingNULLonIncoming","forceBinaryWSFrames","debug","str","reconnectDelay","configure","subscriptionStatus","subscriptionLog","state","setState","subscription","connectionState$","RxStompState","OPEN","unsubscribe","activate","status","StatusBar","barStyle","Navigator","Screen","name","props","LoginScreen","length","navigate","subscriptionLogin","storeInitialUser","titleText","TextInput","secureTextEntry","fontSize","fontWeight","margin","Popover","renderers","HeaderButton","reorderStoredUsers","renderer","rendererProps","preferredPlacement","menuTrigger","Image","source","uri","menuOptions","slice","map","key","menuOption","onSelect","deactivate","handleChangeAccount","disabled","marginRight","borderRadius","color","display","Stack","createStackNavigator","App","RxStomp","appLoaded","setAppLoaded","isLoggedIn","setIsLoggedIn","initialRoute","setInitialRoute","currentUser","setLoggedInUsername","setUserProfilePic","setToken","getLoggedInUser","setCurrentUserData","jsonData","storeUser","userData","storeLoggedInUser","storeNewUser","d","getUsers","u","Provider","NavigationContainer","initialRouteName","options","headerLeft","headerRight","loggedInUsername","startAsync","onFinish","onError"],"mappings":"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","file":"static/js/app.a5c71999.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst StompContext = React.createContext(null);\r\n\r\nexport default StompContext;\r\n","import React from \"react\";\r\n\r\nconst UsersContext = React.createContext(null);\r\n\r\nexport default UsersContext;\r\n","import React, { useContext, useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  TextInput,\r\n  Text,\r\n  View,\r\n  Button,\r\n  Keyboard,\r\n} from \"react-native\";\r\nimport StompContext from \"../contexts/StompContext\";\r\nimport UsersContext from \"../contexts/UsersContext\";\r\n\r\nexport default function Tasks({ logFromServer, statusMessage }) {\r\n  return <View></View>;\r\n}\r\n\r\nconst styles = StyleSheet.create({});\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { Button, StyleSheet, View } from \"react-native\";\r\nimport Dialog from \"react-native-dialog\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { TextInput } from \"react-native-gesture-handler\";\r\nimport StompContext from \"../../contexts/StompContext\";\r\nimport UsersContext from \"../../contexts/UsersContext\";\r\n\r\nexport default function AddAccountDialog({ visible, setVisible }) {\r\n  const [rxStomp] = useContext(StompContext);\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [loginButtonPressed, setLoginButtonPressed] = useState(false);\r\n\r\n  const storeAdditionalUser = async (user) => {\r\n    const usersArray = [...users];\r\n    usersArray.push(user);\r\n    const index = usersArray.findIndex((x) => x.username === user.username);\r\n    usersArray.unshift(usersArray.splice(index, 1)[0]);\r\n    try {\r\n      await AsyncStorage.setItem(\"users\", JSON.stringify(usersArray));\r\n    } catch (e) {\r\n      alert(\"error1\");\r\n    }\r\n    try {\r\n      const usersStorage = JSON.parse(await AsyncStorage.getItem(\"users\"));\r\n      setUsers(usersStorage);\r\n    } catch (e) {\r\n      alert(\"error2\");\r\n    }\r\n  };\r\n\r\n  let subscriptionAddAccount;\r\n\r\n  useEffect(() => {\r\n    if (loginButtonPressed) {\r\n      subscriptionAddAccount = rxStomp\r\n        .watch(\"/user/\" + users[0].username + \"/queue/login/addaccount\")\r\n        .subscribe(function (message) {\r\n          const payload = JSON.parse(message.body);\r\n          console.log(payload);\r\n          if (payload.data.token !== null) {\r\n            const username = payload.data.username;\r\n            const token = payload.data.token;\r\n            const profilePic = payload.data.userProfilePic;\r\n\r\n            const user = { username, profilePic, token };\r\n            storeAdditionalUser(user);\r\n\r\n            ///  setStatusMessage(\"token received\");\r\n            //subscriptionLogin.unsubscribe();\r\n          }\r\n        });\r\n      login(username, password);\r\n    }\r\n  }, [loginButtonPressed]);\r\n\r\n  const showDialog = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    setLoginButtonPressed(true);\r\n  };\r\n\r\n  const login = async (username, password) => {\r\n    const data = { username: username, password: password };\r\n\r\n    rxStomp.publish({\r\n      destination: \"/app/auth/addaccount\",\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Dialog.Container visible={visible} onBackdropPress={handleCancel}>\r\n      <Dialog.Title>Добавление аккаунта</Dialog.Title>\r\n      <Dialog.Input\r\n        style={styles.input}\r\n        autoCapitalize=\"none\"\r\n        label=\"Имя пользователя:\"\r\n        autoCorrect={false}\r\n        value={username}\r\n        onChangeText={(text) => {\r\n          setUsername(text);\r\n        }}\r\n      ></Dialog.Input>\r\n\r\n      <Dialog.Input\r\n        style={styles.input}\r\n        wrapperStyle={styles.wrapper}\r\n        autoCapitalize=\"none\"\r\n        autoCorrect={false}\r\n        label=\"Пароль:\"\r\n        value={password}\r\n        onChangeText={(text) => {\r\n          setPassword(text);\r\n        }}\r\n      />\r\n      <Dialog.Button label=\"Отмена\" onPress={handleCancel} />\r\n      <Dialog.Button label=\"Войти\" onPress={handleLogin} />\r\n    </Dialog.Container>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  input: {\r\n    borderBottomColor: \"black\",\r\n    borderBottomWidth: 0.8,\r\n  },\r\n  wrapper: {},\r\n});\r\n","import React from \"react\";\r\n\r\nconst DialogContext = React.createContext(null);\r\n\r\nexport default DialogContext;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  TextInput,\r\n  Text,\r\n  View,\r\n  Button,\r\n  Image,\r\n  StatusBar,\r\n} from \"react-native\";\r\nimport Tasks from \"../components/Tasks\";\r\nimport { MaterialCommunityIcons, AntDesign } from \"@expo/vector-icons\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { RxStomp, RxStompState } from \"@stomp/rx-stomp\";\r\nimport { of } from \"rxjs\";\r\nimport { take } from \"rxjs/operators\";\r\nimport * as encoding from \"text-encoding\";\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\nimport StompContext from \"../contexts/StompContext\";\r\nimport AddAccountDialog from \"../components/utils/AddAccountDialog\";\r\nimport DialogContext from \"../contexts/DialogContext\";\r\nimport UsersContext from \"../contexts/UsersContext\";\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nconst Homepage2 = ({ isLoggedIn }) => {\r\n  const deleteCookie = async () => {\r\n    try {\r\n      await AsyncStorage.removeItem(\"@logged_in_user\");\r\n      await AsyncStorage.clear();\r\n    } catch (e) {\r\n      // remove error\r\n    }\r\n    console.log(\"Done.\");\r\n  };\r\n\r\n  const [logFromServer, setLogFromServer] = useState(\"\");\r\n  const [statusMessage, setStatusMessage] = useState(\"\");\r\n\r\n  const [rxStomp, isConnected, setIsConnected] = useContext(StompContext);\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [visible, setVisible] = useContext(DialogContext);\r\n\r\n  const rxStompConfig = {\r\n    //brokerURL: \"wss://instanext-server.herokuapp.com/ws\",\r\n    brokerURL: \"ws://192.168.100.50:5000/ws\", //home\r\n    //brokerURL: \"ws://192.168.1.111:5000/ws\", //office\r\n\r\n    connectHeaders: { sessionId: users[0].username, token: users[0].token },\r\n    appendMissingNULLonIncoming: true,\r\n    forceBinaryWSFrames: true,\r\n    debug: function (str) {\r\n      console.log(\"STOMP: \" + str);\r\n    },\r\n    reconnectDelay: 10000,\r\n  };\r\n  rxStomp.configure(rxStompConfig);\r\n\r\n  const [state, setState] = useState();\r\n  useEffect(() => {\r\n    const subscription = rxStomp.connectionState$.subscribe(setState);\r\n    console.log(state === RxStompState.OPEN);\r\n    setIsConnected(state === RxStompState.OPEN);\r\n\r\n    return () => subscription.unsubscribe();\r\n  });\r\n\r\n  let subscriptionStatus;\r\n  let subscriptionLog;\r\n\r\n  useEffect(() => {\r\n    // rxStomp.activate(); UNCOMMENT IN PRODUCTION!!\r\n\r\n    subscriptionStatus = rxStomp\r\n      .watch(\"/user/\" + users[0].username + \"/status\")\r\n      .subscribe(function (message) {\r\n        const payload = JSON.parse(message.body);\r\n        setStatusMessage(payload.status);\r\n      });\r\n\r\n    subscriptionLog = rxStomp\r\n      .watch(\"/user/\" + users[0].username + \"/log\")\r\n      .subscribe(function (message) {\r\n        const payload = JSON.parse(message.body);\r\n        setLogFromServer(payload.status);\r\n        /* \r\n\r\n        let id = listDataLog.listLog.length;\r\n        const newList = listDataLog.listLog.concat({\r\n          id: id,\r\n          message: payload.log,\r\n        });\r\n\r\n        setListDataLog({ ...listDataLog, listLog: newList }); */\r\n      });\r\n    //setIsConnected(true);\r\n    return () => {\r\n      subscriptionStatus.unsubscribe();\r\n      subscriptionLog.unsubscribe();\r\n    };\r\n  }, [users]);\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <StatusBar backgroundColor={colors.white} barStyle=\"dark-content\" />\r\n\r\n      <View style={styles.container}>\r\n        <AddAccountDialog\r\n          visible={visible}\r\n          setVisible={setVisible}\r\n          style={styles.dialog}\r\n        />\r\n        <Text>StompJS connected: {JSON.stringify(isConnected)}</Text>\r\n        {/*\r\n\r\n        <Button\r\n          title=\"LOGOUT FROM ALL (deletes all cookies)\"\r\n          onPress={deleteCookie}\r\n        />\r\n        <Text>isLoggedIn: {JSON.stringify(isLoggedIn)}</Text>\r\n        <Text>currentUser: {users[0].username}</Text>\r\n        <Text>token: {users[0].token}</Text>\r\n        <Image\r\n          style={styles.logo}\r\n          source={users[0].profilePic ? { uri: users[0].profilePic } : null}\r\n        /> */}\r\n\r\n        {isConnected && (\r\n          <Tasks logFromServer={logFromServer} statusMessage={statusMessage} />\r\n        )}\r\n      </View>\r\n      <Tab.Navigator>\r\n        <Tab.Screen name=\"Лайки\" component={Tasks} />\r\n        <Tab.Screen name=\"Подписки\" component={AddAccountDialog} />\r\n      </Tab.Navigator>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: colors.themeColor,\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    marginTop: 10,\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n  dialog: {\r\n    flex: 1,\r\n\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  header: {\r\n    backgroundColor: colors.themeColor,\r\n  },\r\n  toolbar: {\r\n    padding: 16,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  textInput: {\r\n    height: 40,\r\n    borderColor: \"gray\",\r\n    borderWidth: 1,\r\n    width: \"50%\",\r\n  },\r\n  logo: {\r\n    width: 60,\r\n    height: 60,\r\n  },\r\n});\r\n\r\nexport default Homepage2;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Button, StyleSheet, View } from \"react-native\";\r\nimport { TextInput } from \"react-native-gesture-handler\";\r\nimport StompContext from \"../contexts/StompContext\";\r\nimport UsersContext from \"../contexts/UsersContext\";\r\n\r\nconst Task = ({ taskName, destination, buttonName }) => {\r\n  const [rxStomp] = useContext(StompContext);\r\n  const [users] = useContext(UsersContext);\r\n\r\n  const [tag, setTag] = useState(\"\");\r\n\r\n  const handleRunTask = async () => {\r\n    if (tag !== \"\") {\r\n      const data = {\r\n        username: users[0].username,\r\n        token: users[0].token,\r\n        tag: tag,\r\n      };\r\n\r\n      rxStomp.publish({\r\n        destination: destination,\r\n        body: JSON.stringify(data),\r\n      });\r\n    } else alert(\"Тег не может быть пустым!\");\r\n  };\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <TextInput\r\n        style={styles.textInput}\r\n        autoCapitalize=\"none\"\r\n        autoCorrect={false}\r\n        textAlign=\"center\"\r\n        value={tag}\r\n        placeholder={taskName}\r\n        onChangeText={(text) => setTag(text)}\r\n      />\r\n      <Button\r\n        title={!buttonName ? \"Старт\" : buttonName}\r\n        onPress={handleRunTask}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  textInput: {\r\n    height: 40,\r\n    borderBottomColor: \"gray\",\r\n    borderBottomWidth: 1,\r\n    width: \"80%\",\r\n    marginVertical: 10,\r\n  },\r\n});\r\n\r\nexport default Task;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { StyleSheet, TextInput, Text, View, Button, Image } from \"react-native\";\r\nimport Task from \"../../components/Task\";\r\nimport Tasks from \"../../components/Tasks\";\r\n\r\nimport AddAccountDialog from \"../../components/utils/AddAccountDialog\";\r\nimport StompContext from \"../../contexts/StompContext\";\r\nimport UsersContext from \"../../contexts/UsersContext\";\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst LikeScreen = ({ logFromServer, statusMessage }) => {\r\n  return (\r\n    <View style={styles.root}>\r\n      <Task taskName=\"Лайк\" destination=\"/app/like\" />\r\n      <Task taskName=\"Сохранение\" destination=\"/app/save\" />\r\n      <Task taskName=\"Лайк + сохранение\" destination=\"/app/likeandsave\" />\r\n      <Task taskName=\"Самолет\" destination=\"/app/sendmediatogroup\" />\r\n\r\n      <View style={styles.logsView}>\r\n        <Text>Текущее действие: {logFromServer}</Text>\r\n        <Text>Статус: {statusMessage}</Text>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    marginTop: 10,\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n  logsView: {\r\n    alignSelf: \"flex-start\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"flex-start\",\r\n    paddingHorizontal: 10,\r\n  },\r\n  dialog: {\r\n    flex: 1,\r\n\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  header: {\r\n    backgroundColor: colors.themeColor,\r\n  },\r\n  toolbar: {\r\n    padding: 16,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  textInput: {\r\n    height: 40,\r\n    borderColor: \"gray\",\r\n    borderWidth: 1,\r\n    width: \"50%\",\r\n  },\r\n  logo: {\r\n    width: 60,\r\n    height: 60,\r\n  },\r\n  inputWrapper: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  textInput: {\r\n    height: 40,\r\n    borderBottomColor: \"gray\",\r\n    borderBottomWidth: 1,\r\n    // width: \"70%\",\r\n    width: \"80%\",\r\n    marginVertical: 10,\r\n  },\r\n});\r\n\r\nexport default LikeScreen;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  TextInput,\r\n  Text,\r\n  View,\r\n  Button,\r\n  Image,\r\n  StatusBar,\r\n} from \"react-native\";\r\nimport StompContext from \"../../contexts/StompContext\";\r\nimport UsersContext from \"../../contexts/UsersContext\";\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst ExtraScreen = ({ logFromServer, statusMessage }) => {\r\n  const [rxStomp] = useContext(StompContext);\r\n  const [users] = useContext(UsersContext);\r\n\r\n  const handleTest = () => {\r\n    rxStomp.publish({\r\n      destination: \"/app/test\",\r\n    });\r\n  };\r\n\r\n  const newLikeByTag = () => {\r\n    const data = {\r\n      username: users[0].username,\r\n      token: users[0].token,\r\n      tag: \"onedayinperu\",\r\n    };\r\n\r\n    rxStomp.publish({\r\n      destination: \"/app/newlike\",\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Button title=\"test\" onPress={handleTest} />\r\n      <Button title=\"1212\" onPress={newLikeByTag} />\r\n      <Text>Log from server: {logFromServer}</Text>\r\n      <Text>Status: {statusMessage}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: colors.themeColor,\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    marginTop: 10,\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n  dialog: {\r\n    flex: 1,\r\n\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  header: {\r\n    backgroundColor: colors.themeColor,\r\n  },\r\n  toolbar: {\r\n    padding: 16,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  textInput: {\r\n    height: 40,\r\n    borderColor: \"gray\",\r\n    borderWidth: 1,\r\n    width: \"50%\",\r\n  },\r\n  logo: {\r\n    width: 60,\r\n    height: 60,\r\n  },\r\n});\r\n\r\nexport default ExtraScreen;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  TextInput,\r\n  Text,\r\n  View,\r\n  Button,\r\n  Image,\r\n  StatusBar,\r\n} from \"react-native\";\r\nimport StompContext from \"../../contexts/StompContext\";\r\nimport UsersContext from \"../../contexts/UsersContext\";\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst FollowScreen = ({ logFromServer, statusMessage }) => {\r\n  const [rxStomp] = useContext(StompContext);\r\n  const [users] = useContext(UsersContext);\r\n  const newLikeByTag = () => {\r\n    const data = {\r\n      username: users[0].username,\r\n      token: users[0].token,\r\n      tag: \"onedayinperu\",\r\n    };\r\n\r\n    rxStomp.publish({\r\n      destination: \"/app/newlike\",\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Button title=\"1212\" onPress={newLikeByTag} />\r\n      <Text>Log from server: {logFromServer}</Text>\r\n      <Text>Status: {statusMessage}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: colors.themeColor,\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    marginTop: 10,\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n  dialog: {\r\n    flex: 1,\r\n\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  header: {\r\n    backgroundColor: colors.themeColor,\r\n  },\r\n  toolbar: {\r\n    padding: 16,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  textInput: {\r\n    height: 40,\r\n    borderColor: \"gray\",\r\n    borderWidth: 1,\r\n    width: \"50%\",\r\n  },\r\n  logo: {\r\n    width: 60,\r\n    height: 60,\r\n  },\r\n});\r\n\r\nexport default FollowScreen;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  TextInput,\r\n  Text,\r\n  View,\r\n  Button,\r\n  Image,\r\n  StatusBar,\r\n} from \"react-native\";\r\nimport Tasks from \"../components/Tasks\";\r\nimport { MaterialCommunityIcons, AntDesign } from \"@expo/vector-icons\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { RxStomp, RxStompState } from \"@stomp/rx-stomp\";\r\nimport { of } from \"rxjs\";\r\nimport { take } from \"rxjs/operators\";\r\nimport * as encoding from \"text-encoding\";\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\nimport StompContext from \"../contexts/StompContext\";\r\nimport AddAccountDialog from \"../components/utils/AddAccountDialog\";\r\nimport DialogContext from \"../contexts/DialogContext\";\r\nimport UsersContext from \"../contexts/UsersContext\";\r\nimport LikeScreen from \"./TaskScreens/LikeScreen\";\r\nimport ExtraScreen from \"./TaskScreens/ExtraScreen\";\r\nimport FollowScreen from \"./TaskScreens/FollowScreen\";\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nconst HomeScreen = ({ navigation }) => {\r\n  const [rxStomp, isConnected, setIsConnected] = useContext(StompContext);\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [visible, setVisible] = useContext(DialogContext);\r\n\r\n  const [logFromServer, setLogFromServer] = useState(\"\");\r\n  const [statusMessage, setStatusMessage] = useState(\"\");\r\n\r\n  const rxStompConfig = {\r\n    brokerURL: \"wss://instanext-server.herokuapp.com/ws\",\r\n    //brokerURL: \"ws://192.168.100.50:5000/ws\", //home\r\n    //brokerURL: \"ws://192.168.1.111:5000/ws\", //office\r\n\r\n    connectHeaders: { sessionId: users[0].username, token: users[0].token },\r\n    appendMissingNULLonIncoming: true,\r\n    forceBinaryWSFrames: true,\r\n    debug: function (str) {\r\n      console.log(\"STOMP: \" + str);\r\n    },\r\n    reconnectDelay: 10000,\r\n  };\r\n  rxStomp.configure(rxStompConfig);\r\n\r\n  const [state, setState] = useState();\r\n  useEffect(() => {\r\n    const subscription = rxStomp.connectionState$.subscribe(setState);\r\n    console.log(state === RxStompState.OPEN);\r\n    setIsConnected(state === RxStompState.OPEN);\r\n\r\n    return () => subscription.unsubscribe();\r\n  });\r\n\r\n  let subscriptionStatus;\r\n  let subscriptionLog;\r\n\r\n  useEffect(() => {\r\n    setLogFromServer(\"\");\r\n    setStatusMessage(\"\");\r\n\r\n    rxStomp.activate();\r\n\r\n    subscriptionStatus = rxStomp\r\n      .watch(\"/user/\" + users[0].username + \"/queue/status\")\r\n      .subscribe(function (message) {\r\n        const payload = JSON.parse(message.body);\r\n        setStatusMessage(payload.status);\r\n      });\r\n\r\n    subscriptionLog = rxStomp\r\n      .watch(\"/user/\" + users[0].username + \"/queue/log\")\r\n      .subscribe(function (message) {\r\n        const payload = JSON.parse(message.body);\r\n        setLogFromServer(payload.status);\r\n        /* \r\n\r\n        let id = listDataLog.listLog.length;\r\n        const newList = listDataLog.listLog.concat({\r\n          id: id,\r\n          message: payload.log,\r\n        });\r\n\r\n        setListDataLog({ ...listDataLog, listLog: newList }); */\r\n      });\r\n    //setIsConnected(true);\r\n    return () => {\r\n      subscriptionStatus.unsubscribe();\r\n      subscriptionLog.unsubscribe();\r\n    };\r\n  }, [users]);\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <StatusBar backgroundColor={colors.white} barStyle=\"dark-content\" />\r\n      {/*  <Text>StompJS connected: {JSON.stringify(isConnected)}</Text> */}\r\n      <AddAccountDialog\r\n        visible={visible}\r\n        setVisible={setVisible}\r\n        style={styles.dialog}\r\n      />\r\n      {!isConnected ? (\r\n        <Text>Соединение с сервером не установлено...</Text>\r\n      ) : (\r\n        <Tab.Navigator>\r\n          <Tab.Screen name=\"Лайки\">\r\n            {(props) => (\r\n              <LikeScreen\r\n                {...props}\r\n                isConnected={isConnected}\r\n                logFromServer={logFromServer}\r\n                statusMessage={statusMessage}\r\n                visible={visible}\r\n                setVisible={setVisible}\r\n              />\r\n            )}\r\n          </Tab.Screen>\r\n          <Tab.Screen name=\"Подписки\">\r\n            {(props) => (\r\n              <FollowScreen\r\n                {...props}\r\n                logFromServer={logFromServer}\r\n                statusMessage={statusMessage}\r\n              />\r\n            )}\r\n          </Tab.Screen>\r\n          {\r\n            <Tab.Screen name=\"Extra\">\r\n              {(props) => (\r\n                <ExtraScreen\r\n                  {...props}\r\n                  logFromServer={logFromServer}\r\n                  statusMessage={statusMessage}\r\n                />\r\n              )}\r\n            </Tab.Screen>\r\n          }\r\n        </Tab.Navigator>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default HomeScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: colors.themeColor,\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    marginTop: 10,\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n  dialog: {\r\n    flex: 1,\r\n\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  header: {\r\n    backgroundColor: colors.themeColor,\r\n  },\r\n  toolbar: {\r\n    padding: 16,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  textInput: {\r\n    height: 40,\r\n    borderColor: \"gray\",\r\n    borderWidth: 1,\r\n    width: \"50%\",\r\n  },\r\n  logo: {\r\n    width: 60,\r\n    height: 60,\r\n  },\r\n});\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, StyleSheet, Text, TextInput, View } from \"react-native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport StompContext from \"../contexts/StompContext\";\r\nimport UsersContext from \"../contexts/UsersContext\";\r\n\r\nconst LoginScreen = ({ navigation }) => {\r\n  const [rxStomp] = useContext(StompContext);\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleLogin = async () => {\r\n    await login(username, password);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (users.length) navigation.navigate(\"Home\");\r\n    return () => {\r\n      subscriptionLogin.unsubscribe();\r\n    };\r\n  }, [users]);\r\n\r\n  const storeInitialUser = async (user) => {\r\n    const usersArray = [];\r\n    usersArray.push(user);\r\n    try {\r\n      await AsyncStorage.setItem(\"users\", JSON.stringify(usersArray));\r\n    } catch (e) {}\r\n    try {\r\n      const usersStorage = JSON.parse(await AsyncStorage.getItem(\"users\"));\r\n      setUsers(usersStorage);\r\n    } catch (e) {}\r\n  };\r\n\r\n  let subscriptionLogin;\r\n  useEffect(() => {\r\n    const rxStompConfig = {\r\n      brokerURL: \"wss://instanext-server.herokuapp.com/ws\",\r\n      //brokerURL: \"ws://192.168.100.13:5000/ws\", //home\r\n      //brokerURL: \"ws://192.168.1.113:5000/ws\", //office\r\n\r\n      connectHeaders: { sessionId: \"guest\", token: null },\r\n      appendMissingNULLonIncoming: true,\r\n      forceBinaryWSFrames: true,\r\n      debug: function (str) {\r\n        console.log(\"STOMP: \" + str);\r\n      },\r\n      reconnectDelay: 10000,\r\n    };\r\n    rxStomp.configure(rxStompConfig);\r\n    subscriptionLogin = rxStomp\r\n      .watch(\"/user/guest/queue/login\")\r\n      .subscribe(function (message) {\r\n        const payload = JSON.parse(message.body);\r\n        console.log(payload);\r\n        if (payload.data.token !== null) {\r\n          const username = payload.data.username;\r\n          const token = payload.data.token;\r\n          const profilePic = payload.data.userProfilePic;\r\n\r\n          const user = {\r\n            username,\r\n            profilePic,\r\n            token,\r\n          };\r\n          //storeUser(username, data);\r\n          storeInitialUser(user);\r\n\r\n          ///  setStatusMessage(\"token received\");\r\n        }\r\n      });\r\n    rxStomp.activate();\r\n    return () => {\r\n      /*  subscriptionLogin.unsubscribe();\r\n      rxStomp.deactivate(); */\r\n    };\r\n  }, []);\r\n\r\n  const login = async (username, password) => {\r\n    const data = { username: username, password: password };\r\n\r\n    rxStomp.publish({\r\n      destination: \"/app/auth/login\",\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.titleText}>Авторизация</Text>\r\n      <TextInput\r\n        style={styles.textInput}\r\n        placeholder={\"Имя пользователя\"}\r\n        value={username}\r\n        onChangeText={(text) => {\r\n          setUsername(text);\r\n        }}\r\n      />\r\n      <TextInput\r\n        style={styles.textInput}\r\n        placeholder={\"Пароль\"}\r\n        secureTextEntry={true}\r\n        value={password}\r\n        onChangeText={(text) => {\r\n          setPassword(text);\r\n        }}\r\n      />\r\n      <Button title=\"Войти\" onPress={handleLogin} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default LoginScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n  },\r\n  titleText: {\r\n    fontSize: 30,\r\n    fontWeight: \"bold\",\r\n  },\r\n  textInput: {\r\n    margin: 20,\r\n    height: 40,\r\n    borderColor: \"red\",\r\n    borderWidth: 1,\r\n    width: \"80%\",\r\n  },\r\n});\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { StyleSheet, Text, Image } from \"react-native\";\r\nimport {\r\n  Menu,\r\n  MenuOptions,\r\n  MenuOption,\r\n  MenuTrigger,\r\n  renderers,\r\n} from \"react-native-popup-menu\";\r\n\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nimport { colors } from \"../styles/theme\";\r\nimport StompContext from \"../contexts/StompContext\";\r\nimport DialogContext from \"../contexts/DialogContext\";\r\nimport UsersContext from \"../contexts/UsersContext\";\r\n\r\nconst { Popover } = renderers;\r\n\r\nconst HeaderButton = () => {\r\n  const [rxStomp] = useContext(StompContext);\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [visible, setVisible] = useContext(DialogContext);\r\n\r\n  const handleAddAccount = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const reorderStoredUsers = async (username) => {\r\n    const usersArray = [...users];\r\n    const index = usersArray.findIndex((x) => x.username === username);\r\n    usersArray.unshift(usersArray.splice(index, 1)[0]);\r\n    try {\r\n      await AsyncStorage.setItem(\"users\", JSON.stringify(usersArray));\r\n    } catch (e) {}\r\n    try {\r\n      const usersStorage = JSON.parse(await AsyncStorage.getItem(\"users\"));\r\n      setUsers(usersStorage);\r\n    } catch (e) {}\r\n  };\r\n\r\n  const handleChangeAccount = async (user) => {\r\n    await rxStomp.deactivate();\r\n    /* let d;\r\n    try {\r\n      await AsyncStorage.setItem(\"@logged_in_user\", user);\r\n    } catch (e) {}\r\n    try {\r\n      d = await AsyncStorage.getItem(\"@logged_in_user\");\r\n    } catch (e) {}\r\n    await setLoggedInUsername(d);\r\n    await setCurrentUserData(d); */\r\n    await reorderStoredUsers(user);\r\n    await rxStomp.activate();\r\n  };\r\n\r\n  return (\r\n    <Menu renderer={Popover} rendererProps={{ preferredPlacement: \"bottom\" }}>\r\n      <MenuTrigger style={styles.menuTrigger}>\r\n        <Image\r\n          style={styles.logo}\r\n          source={{\r\n            uri: users[0].profilePic,\r\n          }}\r\n        />\r\n        <Text style={styles.text}>{users[0].username}</Text>\r\n      </MenuTrigger>\r\n      <MenuOptions style={styles.menuOptions}>\r\n        {users.slice(1).map((user, index) => {\r\n          return (\r\n            <MenuOption\r\n              key={index}\r\n              style={styles.menuOption}\r\n              value={user.username}\r\n              onSelect={(value) => handleChangeAccount(value)}\r\n            >\r\n              <Image\r\n                style={styles.logo}\r\n                source={user.profilePic ? { uri: user.profilePic } : null}\r\n              />\r\n              <Text style={styles.text}>{user.username}</Text>\r\n            </MenuOption>\r\n          );\r\n        })}\r\n\r\n        <MenuOption disabled={true} />\r\n        <MenuOption\r\n          onSelect={() => handleAddAccount()}\r\n          text=\"Добавить аккаунт\"\r\n        />\r\n      </MenuOptions>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default HeaderButton;\r\n\r\nconst styles = StyleSheet.create({\r\n  logo: {\r\n    width: 45,\r\n    height: 45,\r\n    marginRight: 5,\r\n    borderRadius: 50,\r\n  },\r\n  text: {\r\n    fontSize: 14,\r\n    fontWeight: \"500\",\r\n    color: colors.secondary,\r\n  },\r\n  menuTrigger: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    height: 50,\r\n    marginRight: 5,\r\n  },\r\n  menuOptions: {\r\n    display: \"flex\",\r\n  },\r\n  menuOption: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    height: 50,\r\n    marginRight: 5,\r\n  },\r\n});\r\n","export const colors = {\r\n  primary: \"#fff\",\r\n  secondary: \"#94d82d\",\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { StyleSheet } from \"react-native\";\nimport Homepage2 from \"./screens/Homepage2\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport HeaderButton from \"./components/HeaderButton\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport AppLoading from \"expo-app-loading\";\nimport { MenuProvider } from \"react-native-popup-menu\";\n\nimport { throttleTime, map, scan } from \"rxjs/operators\";\nimport * as encoding from \"text-encoding\";\nimport { RxStomp, RxStompState } from \"@stomp/rx-stomp\";\nimport { add, remove } from \"./lib/ArrayOperators\";\nimport StompContext from \"./contexts/StompContext\";\nimport DialogContext from \"./contexts/DialogContext\";\nimport UsersContext from \"./contexts/UsersContext\";\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  const [rxStomp, setRxStomp] = useState(new RxStomp());\n  const [isConnected, setIsConnected] = useState(false);\n  const [appLoaded, setAppLoaded] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [initialRoute, setInitialRoute] = useState(\"\");\n  const [currentUser, setLoggedInUsername] = useState(\"\");\n  const [userProfilePic, setUserProfilePic] = useState(\"\");\n  const [token, setToken] = useState(\"\");\n  const [users, setUsers] = useState([]);\n  const [visible, setVisible] = useState(false);\n\n  const getLoggedInUser = async () => {\n    // getCurrentUser\n    try {\n      const username = await AsyncStorage.getItem(\"@logged_in_user\"); // @current_user\n      if (username == null) {\n        setInitialRoute(\"Login\");\n      } else {\n        setIsLoggedIn(true);\n        setCurrentUserData(username);\n        // setUsers((users) => ({ username }, { ...users }));\n        let obj = { username: \"kflkl\", profilePic: \"dffd\" };\n        // setUsers(obj);\n        setInitialRoute(\"Home\");\n      }\n    } catch (e) {\n      alert(\"error getting logged in user\");\n    }\n  };\n\n  const setCurrentUserData = async (username) => {\n    try {\n      const jsonData = await AsyncStorage.getItem(username);\n      const data = JSON.parse(jsonData);\n      setToken(data.token); // setCurrentUserToken\n      setLoggedInUsername(username); // setCurrentUsername\n      setUserProfilePic(data.profilePic); // setCurrentUserProfilePicture\n    } catch {}\n  };\n\n  const storeUser = async (username, userData) => {\n    try {\n      let data = JSON.stringify(userData);\n      await AsyncStorage.setItem(username, data);\n    } catch (e) {\n      // saving error\n    }\n    storeLoggedInUser(username);\n  };\n  // storeCurrentUser\n  const storeLoggedInUser = async (username) => {\n    try {\n      await AsyncStorage.setItem(\"@logged_in_user\", username);\n    } catch (e) {\n      // error\n    }\n    await getLoggedInUser();\n  };\n  const storeNewUser = async (username, userData) => {\n    try {\n      let data = JSON.stringify(userData);\n      await AsyncStorage.setItem(username, data);\n    } catch (e) {}\n    try {\n      await AsyncStorage.setItem(\"@logged_in_user\", username);\n    } catch (e) {}\n    try {\n      d = await AsyncStorage.getItem(\"@logged_in_user\");\n    } catch (e) {}\n    await setLoggedInUsername(d);\n    await setCurrentUserData(d);\n  };\n  // START debug //\n\n  const getAllUsersExceptCurrentUser = async () => {\n    let keys = [];\n    try {\n      keys = await AsyncStorage.getAllKeys();\n    } catch (e) {\n      // read key error\n    }\n    let currentUser;\n    console.log(keys);\n    const index = keys.indexOf(\"@logged_in_user\");\n    if (index > -1) {\n      keys.splice(index, 1);\n    }\n    const index2 = keys.indexOf(currentUser);\n    console.log(index2);\n    if (index2 > -1) {\n      keys.splice(index2, 1);\n    }\n    let obj = [];\n    let profilePic;\n    await Promise.all(\n      keys.map(async (k, i) => {\n        try {\n          const jsonData = await AsyncStorage.getItem(k);\n          const data = JSON.parse(jsonData);\n          profilePic = data.profilePic;\n        } catch (e) {\n          console.log(\"failed loading profile picture\");\n        }\n        console.log(\"prof pic: \", profilePic);\n        console.log(\"key \" + i + \": \" + k);\n        obj.push({ username: k, profilePic: profilePic });\n      })\n    );\n    obj.map((i) => {\n      console.log(i.username, i.profilePic);\n    });\n    //setUsers((state) => [...state, ...obj]);\n\n    //setUsers((state) => [obj2, ...state]);\n  };\n\n  /* useEffect(() => {\n    setUsers([{ username: \"uusd\" }]);\n  }, []); */\n\n  const getUsers = async () => {\n    try {\n      const users = JSON.parse(await AsyncStorage.getItem(\"users\"));\n      if (!users.length) {\n        setInitialRoute(\"Login\");\n      } else {\n        setIsLoggedIn(true);\n        setUsers(users);\n        setInitialRoute(\"Home\");\n      }\n    } catch (e) {\n      setInitialRoute(\"Login\");\n    }\n  };\n  /* \n  const getUsers = async () => {\n    let keys = [];\n    try {\n      keys = await AsyncStorage.getAllKeys();\n    } catch (e) {\n      // read key error\n    }\n    let currentUser;\n    console.log(keys);\n    const index = keys.indexOf(\"@logged_in_user\");\n    if (index > -1) {\n      keys.splice(index, 1);\n    }\n    const index2 = keys.indexOf(currentUser);\n    console.log(index2);\n    if (index2 > -1) {\n      keys.splice(index2, 1);\n    }\n    let obj = [];\n    let profilePic;\n    await Promise.all(\n      keys.map(async (k, i) => {\n        try {\n          const jsonData = await AsyncStorage.getItem(k);\n          const data = JSON.parse(jsonData);\n          profilePic = data.profilePic;\n        } catch (e) {\n          console.log(\"failed loading profile picture\");\n        }\n        console.log(\"prof pic: \", profilePic);\n        console.log(\"key \" + i + \": \" + k);\n        obj.push({ username: k, profilePic: profilePic });\n      })\n    );\n    obj.map((i) => {\n      console.log(i.username, i.profilePic);\n    });\n    // setUsers((state) => [...state, ...obj]);\n\n    //setUsers((state) => [obj2, ...state]);\n  }; */\n\n  useEffect(() => {\n    if (users !== null)\n      users.map((u) => {\n        console.log(\"users: \", u.username);\n      });\n  }, [users]);\n\n  // END debug //\n\n  const loadApp = async () => {\n    // const images = [require('./assets/snack-icon.png')];\n\n    /*  const cacheImages = images.map(image => {\n      return Asset.fromModule(image).downloadAsync();\n    });  */\n    return getUsers();\n  };\n\n  if (!appLoaded) {\n    return (\n      <AppLoading\n        startAsync={loadApp}\n        onFinish={() => {\n          //  getAllUsersExceptCurrentUser();\n          setAppLoaded(true);\n        }}\n        onError={() => {}}\n      />\n    );\n  }\n\n  return (\n    <MenuProvider>\n      <StompContext.Provider value={[rxStomp, isConnected, setIsConnected]}>\n        <UsersContext.Provider value={[users, setUsers]}>\n          <DialogContext.Provider value={[visible, setVisible]}>\n            <NavigationContainer>\n              <Stack.Navigator initialRouteName={initialRoute}>\n                <Stack.Screen\n                  name=\"LikeTime\"\n                  options={{\n                    headerLeft: null,\n                    headerRight: (props) => <HeaderButton />,\n                  }}\n                >\n                  {(props) => (\n                    <HomeScreen\n                      {...props}\n                      isLoggedIn={isLoggedIn}\n                      loggedInUsername={currentUser}\n                      userProfilePic={userProfilePic}\n                      token={token}\n                      storeNewUser={storeNewUser}\n                      storeUser={storeUser}\n                    />\n                  )}\n                </Stack.Screen>\n                <Stack.Screen name=\"Login\">\n                  {(props) => <LoginScreen {...props} />}\n                </Stack.Screen>\n              </Stack.Navigator>\n            </NavigationContainer>\n          </DialogContext.Provider>\n        </UsersContext.Provider>\n      </StompContext.Provider>\n    </MenuProvider>\n  );\n}\n"],"sourceRoot":""}