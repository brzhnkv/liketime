{"version":3,"sources":["contexts/DialogContext.js","contexts/UsersContext.js","components/header/HomeScreenHeader.js","redux/counterSlice.js","redux/messagesSlice.js","redux/statusSlice.js","redux/saga/requests/messages.js","redux/saga/handlers/messages.js","redux/saga/requests/status.js","redux/saga/handlers/status.js","redux/saga/rootSaga.js","redux/store.js","components/utils/AddAccountDialog.js","contexts/StompContext.js","lib/stomp/Stomp.js","components/console/ConsoleLine.js","components/console/Console.js","components/console/ConsoleHeader.js","screens/TaskScreens/AdminScreen.js","screens/TaskScreens/FollowScreen.js","components/Task.js","screens/TaskScreens/LikeScreen.js","screens/HomeScreen.js","screens/LoginScreen.js","App.js"],"names":["DialogContext","React","createContext","UsersContext","UserIcon","props","name","LogoutIcon","HomeScreenHeader","useContext","users","setUsers","setVisible","useState","isLogoutActive","setIsLogoutActive","reorderStoredUsers","username","a","async","usersArray","index","findIndex","x","unshift","splice","AsyncStorage","setItem","JSON","stringify","getItem","usersStorage","parse","production","menuVisible","setMenuVisible","toggleMenu","renderMenuAction","icon","View","style","styles","menuActionWrapper","source","uri","profilePic","alt","height","width","onPress","useEffect","length","navigation","navigate","title","titleContainer","accessoryRight","anchor","visible","onBackdropPress","placement","backdropStyle","backdrop","onSelect","slice","map","user","key","accessoryLeft","handleChangeAccount","disabled","axios","request","method","url","shift","handleLogout","StyleSheet","create","flexDirection","alignItems","logo","marginHorizontal","backgroundColor","display","counterSlice","createSlice","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","messages","statusMessages","logMessages","lastStatusMessage","getMessages","setMessages","receiveStatusMessage","push","receiveLogMessage","clearMessages","status","getStatus","setStatus","requestGetMessages","data","handleGetMessages","call","response","put","console","log","requestGetStatus","handleGetStatus","watcherSaga","takeLatest","type","sagaMiddleware","createSagaMiddleware","middleware","reducer","combineReducers","counter","counterReducer","messagesReducer","statusReducer","store","configureStore","getDefaultMiddleware","thunk","run","AddAccountDialog","setUsername","password","setPassword","handleCancel","Container","Title","Input","input","autoCapitalize","label","autoCorrect","onChangeText","text","wrapperStyle","wrapper","Button","post","then","alert","storeAdditionalUser","userProfilePic","token","catch","error","container","flex","justifyContent","borderBottomColor","borderBottomWidth","StompContext","Subscription","stomp","path","dispatch","watch","subscribe","message","newMessage","body","ConsoleLine","line","Text","textAlign","color","paddingLeft","Console","flatListRef","useRef","useSelector","flexGrow","renderItem","item","keyExtractor","toString","contentContainerStyle","ref","onContentSizeChange","current","scrollToEnd","ConsoleHeader","statusMessage","root","marginTop","AdminScreen","rxStomp","useDispatch","colorScheme","isLoading","isLoadingText","activate","setIsRunning","publish","destination","variant","size","tag","FollowScreen","textInput","marginVertical","Task","taskName","buttonName","setTag","placeholder","editedTag","replace","LikeScreen","colors","Tab","createBottomTabNavigator","HomeScreen","RxStomp","isConnected","setIsConnected","deactivate","configure","brokerURL","connectHeaders","sessionId","appendMissingNULLonIncoming","forceBinaryWSFrames","debug","str","reconnectDelay","connectionTimeout","StompConfig","subscriptionStatus","subscriptionLog","setState","subscription","connectionState$","RxStompState","OPEN","unsubscribe","dispatchStatus","newStatusMessage","dispatchLog","newLogMessage","Provider","StatusBar","barStyle","dialog","Navigator","Screen","LoginScreen","storeInitialUser","titleText","TextInput","secureTextEntry","fontSize","fontWeight","margin","borderColor","borderWidth","Stack","createStackNavigator","theme","extendTheme","brand","900","800","700","App","appLoaded","setAppLoaded","isLoggedIn","setIsLoggedIn","initialRoute","setInitialRoute","currentUser","setLoggedInUsername","setUserProfilePic","setToken","getLoggedInUser","setCurrentUserData","jsonData","storeUser","userData","storeLoggedInUser","storeNewUser","d","getUsers","icons","EvaIconsPack","eva","NavigationContainer","initialRouteName","options","header","loggedInUsername","startAsync","onFinish","onError"],"mappings":"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","file":"static/js/app.f21af209.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst DialogContext = React.createContext(null);\r\n\r\nexport default DialogContext;\r\n","import React from \"react\";\r\n\r\nconst UsersContext = React.createContext(null);\r\n\r\nexport default UsersContext;\r\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport {\r\n  Avatar,\r\n  Icon,\r\n  MenuItem,\r\n  OverflowMenu,\r\n  Text,\r\n  TopNavigation,\r\n  TopNavigationAction,\r\n} from \"@ui-kitten/components\";\r\nimport axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport { Image } from \"react-native-svg\";\r\nimport DialogContext from \"../../contexts/DialogContext\";\r\nimport UsersContext from \"../../contexts/UsersContext\";\r\n\r\nconst UserIcon = (props) => <Icon {...props} name=\"person-add\" />;\r\nconst LogoutIcon = (props) => <Icon {...props} name=\"log-out\" />;\r\n\r\nexport const HomeScreenHeader = () => {\r\n  //const [rxStomp] = useContext(StompContext);\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [visible, setVisible] = useContext(DialogContext);\r\n\r\n  const [isLogoutActive, setIsLogoutActive] = useState(true);\r\n\r\n  const handleAddAccount = () => {\r\n    toggleMenu();\r\n    setVisible(true);\r\n  };\r\n\r\n  const reorderStoredUsers = async (username) => {\r\n    const usersArray = [...users];\r\n    const index = usersArray.findIndex((x) => x.username === username);\r\n    usersArray.unshift(usersArray.splice(index, 1)[0]);\r\n    try {\r\n      await AsyncStorage.setItem(\"users\", JSON.stringify(usersArray));\r\n    } catch (e) {}\r\n    try {\r\n      const usersStorage = JSON.parse(await AsyncStorage.getItem(\"users\"));\r\n      setUsers(usersStorage);\r\n    } catch (e) {}\r\n  };\r\n\r\n  const handleChangeAccount = async (user) => {\r\n    toggleMenu();\r\n    //await rxStomp.deactivate();\r\n    await reorderStoredUsers(user);\r\n    //await rxStomp.activate();\r\n  };\r\n\r\n  const office = `http://localhost:5000/api/v1/user/${users[0].username}`;\r\n  const production = `https://instanext-server.herokuapp.com/api/v1/user/${users[0].username}`;\r\n\r\n  const handleLogout = async () => {\r\n    toggleMenu();\r\n    setIsLogoutActive(false);\r\n    // await rxStomp.deactivate();\r\n    axios.request({\r\n      method: \"DELETE\",\r\n      url: production,\r\n    });\r\n\r\n    const usersArray = [...users];\r\n    usersArray.shift();\r\n\r\n    try {\r\n      await AsyncStorage.setItem(\"users\", JSON.stringify(usersArray));\r\n    } catch (e) {}\r\n    try {\r\n      const usersStorage = JSON.parse(await AsyncStorage.getItem(\"users\"));\r\n      setUsers(usersStorage);\r\n    } catch (e) {}\r\n    //await rxStomp.activate();\r\n    setIsLogoutActive(true);\r\n  };\r\n\r\n  const [menuVisible, setMenuVisible] = React.useState(false);\r\n\r\n  const toggleMenu = () => {\r\n    setMenuVisible(!menuVisible);\r\n  };\r\n\r\n  const renderMenuAction = () => (\r\n    <TopNavigationAction\r\n      icon={() => (\r\n        <View style={styles.menuActionWrapper}>\r\n          <Image // here wast Avatar to show image\r\n            //defaultSource={{ uri: \"/assets/icon.png\" }}\r\n            source={{ uri: users[0].profilePic }}\r\n            alt=\"\"\r\n            height={50}\r\n            width={50}\r\n          />\r\n          <Text //style={styles.text}\r\n          >\r\n            {users[0].username}\r\n          </Text>\r\n        </View>\r\n      )}\r\n      onPress={toggleMenu}\r\n    ></TopNavigationAction>\r\n  );\r\n\r\n  const renderOverflowMenuAction = () => (\r\n    <OverflowMenu\r\n      anchor={renderMenuAction}\r\n      visible={menuVisible}\r\n      onBackdropPress={toggleMenu}\r\n      placement={\"bottom end\"}\r\n      backdropStyle={styles.backdrop}\r\n      onSelect={toggleMenu}\r\n    >\r\n      {users.slice(1).map((user) => {\r\n        return (\r\n          <MenuItem\r\n            key={user.username}\r\n            accessoryLeft={() => <Avatar source={{ uri: user.profilePic }} />}\r\n            title={user.username}\r\n            onPress={(title) => handleChangeAccount(title)}\r\n          ></MenuItem>\r\n        );\r\n      })}\r\n      <MenuItem\r\n        accessoryLeft={UserIcon}\r\n        title=\"Добавить аккаунт\"\r\n        onPress={() => handleAddAccount()}\r\n      />\r\n      <MenuItem\r\n        accessoryLeft={LogoutIcon}\r\n        title=\"Выйти из системы\"\r\n        disabled={!isLogoutActive}\r\n        onPress={() => handleLogout()}\r\n      />\r\n    </OverflowMenu>\r\n  );\r\n\r\n  const renderTitle = (props) => (\r\n    <View style={styles.titleContainer}>\r\n      {/*  <Avatar style={styles.logo} source={require(\"../../assets/icon.png\")} /> */}\r\n      <Text {...props}>LikeTime</Text>\r\n    </View>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!users.length) navigation.navigate(\"Home\");\r\n  }, [users]);\r\n\r\n  return (\r\n    <TopNavigation\r\n      title={renderTitle}\r\n      accessoryRight={renderOverflowMenuAction}\r\n    />\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  titleContainer: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n  logo: {\r\n    marginHorizontal: 16,\r\n  },\r\n  backdrop: {\r\n    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n  },\r\n  menuActionWrapper: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"flex-end\",\r\n  },\r\n});\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\nexport default counterSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const messages = createSlice({\r\n  name: \"messages\",\r\n  initialState: {\r\n    statusMessages: [],\r\n    logMessages: [],\r\n    lastStatusMessage: \"\",\r\n  },\r\n  reducers: {\r\n    getMessages() {},\r\n    setMessages(state, action) {\r\n      const { statusMessages, logMessages } = action.payload;\r\n      return {\r\n        ...state,\r\n        statusMessages,\r\n        logMessages,\r\n        lastStatusMessage: statusMessages[statusMessages.length - 1],\r\n      };\r\n    },\r\n\r\n    receiveStatusMessage: (state, action) => {\r\n      ({\r\n        ...state,\r\n        statusMessages: state.statusMessages.push(action.payload),\r\n      });\r\n      state.lastStatusMessage =\r\n        state.statusMessages[state.statusMessages.length - 1];\r\n    },\r\n\r\n    receiveLogMessage: (state, action) => {\r\n      ({\r\n        ...state,\r\n        logMessages: state.logMessages.push(action.payload),\r\n      });\r\n    },\r\n    clearMessages() {\r\n      return {\r\n        statusMessages: [],\r\n        logMessages: [],\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const {\r\n  getMessages,\r\n  setMessages,\r\n  receiveStatusMessage,\r\n  receiveLogMessage,\r\n  clearMessages,\r\n} = messages.actions;\r\n\r\nexport default messages.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const status = createSlice({\r\n  name: \"status\",\r\n  initialState: {\r\n    status: false,\r\n  },\r\n  reducers: {\r\n    getStatus() {},\r\n    setStatus(state, action) {\r\n      const { status } = action.payload;\r\n      return {\r\n        ...state,\r\n        status: status,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nexport const { getStatus, setStatus } = status.actions;\r\n\r\nexport default status.reducer;\r\n","import axios from \"axios\";\r\n\r\nexport function requestGetMessages(username) {\r\n  return axios.request({\r\n    method: \"POST\",\r\n    //url: \"http://localhost:5000/api/v1/user/messages\", //office\r\n    url: \"https://instanext-server.herokuapp.com/api/v1/user/messages\", //production\r\n    data: { username: username },\r\n  });\r\n}\r\n","import { call, put } from \"redux-saga/effects\";\r\nimport { setMessages } from \"../../messagesSlice\";\r\nimport { requestGetMessages } from \"../requests/messages\";\r\n\r\nexport function* handleGetMessages(action) {\r\n  try {\r\n    const { payload } = action;\r\n    const { username } = payload;\r\n    const response = yield call(requestGetMessages, username);\r\n    const { data } = response;\r\n    yield put(setMessages({ ...data }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport function requestGetStatus(username) {\r\n  return axios.request({\r\n    method: \"POST\",\r\n    //url: \"http://localhost:5000/api/v1/user/status\", //office\r\n    url: \"https://instanext-server.herokuapp.com/api/v1/user/messages\", //production\r\n    data: { username: username },\r\n  });\r\n}\r\n","import { call, put } from \"redux-saga/effects\";\r\nimport { setStatus } from \"../../statusSlice\";\r\nimport { requestGetStatus } from \"../requests/status\";\r\n\r\nexport function* handleGetStatus(action) {\r\n  try {\r\n    const { payload } = action;\r\n    const { username } = payload;\r\n    const response = yield call(requestGetStatus, username);\r\n    const { data } = response;\r\n    yield put(setStatus({ ...data }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n","import { takeLatest } from \"redux-saga/effects\";\r\nimport { getMessages } from \"../messagesSlice\";\r\nimport { getStatus } from \"../statusSlice\";\r\nimport { handleGetMessages } from \"./handlers/messages\";\r\nimport { handleGetStatus } from \"./handlers/status\";\r\n\r\nexport function* watcherSaga() {\r\n  yield takeLatest(getMessages.type, handleGetMessages);\r\n  yield takeLatest(getStatus.type, handleGetStatus);\r\n}\r\n","import {\r\n  configureStore,\r\n  combineReducers,\r\n  getDefaultMiddleware,\r\n} from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport counterReducer from \"./counterSlice\";\r\n\r\nimport { watcherSaga } from \"./saga/rootSaga\";\r\nimport messagesReducer from \"./messagesSlice\";\r\nimport statusReducer from \"./statusSlice\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleware = [sagaMiddleware];\r\n\r\nconst reducer = combineReducers({\r\n  counter: counterReducer,\r\n\r\n  messages: messagesReducer,\r\n  status: statusReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer,\r\n  middleware: [...getDefaultMiddleware({ thunk: false }), ...middleware],\r\n});\r\n\r\nsagaMiddleware.run(watcherSaga);\r\n\r\nexport default store;\r\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport axios from \"axios\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport Dialog from \"react-native-dialog\";\r\nimport UsersContext from \"../../contexts/UsersContext\";\r\n\r\nexport default function AddAccountDialog({ visible, setVisible }) {\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const storeAdditionalUser = async (user) => {\r\n    const usersArray = [...users];\r\n    usersArray.push(user);\r\n    const index = usersArray.findIndex((x) => x.username === user.username);\r\n    usersArray.unshift(usersArray.splice(index, 1)[0]);\r\n    try {\r\n      await AsyncStorage.setItem(\"users\", JSON.stringify(usersArray));\r\n    } catch (e) {\r\n      alert(\"error1\");\r\n    }\r\n    try {\r\n      const usersStorage = JSON.parse(await AsyncStorage.getItem(\"users\"));\r\n      setUsers(usersStorage);\r\n    } catch (e) {\r\n      alert(\"error2\");\r\n    }\r\n  };\r\n\r\n  const showDialog = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    axios\r\n      .post(\"http://localhost:5000/api/v1/user/\", {\r\n        username: username,\r\n        password: password,\r\n      })\r\n      .then(function (response) {\r\n        console.log(response);\r\n        const { data } = response;\r\n\r\n        const user = {\r\n          username: data.username,\r\n          profilePic: data.userProfilePic,\r\n          token: data.token,\r\n        };\r\n\r\n        storeAdditionalUser(user);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n\r\n    setVisible(false);\r\n  };\r\n\r\n  return (\r\n    <Dialog.Container visible={visible} onBackdropPress={handleCancel}>\r\n      <Dialog.Title>Добавление аккаунта</Dialog.Title>\r\n      <Dialog.Input\r\n        style={styles.input}\r\n        autoCapitalize=\"none\"\r\n        label=\"Имя пользователя:\"\r\n        autoCorrect={false}\r\n        value={username}\r\n        onChangeText={(text) => {\r\n          setUsername(text);\r\n        }}\r\n      ></Dialog.Input>\r\n\r\n      <Dialog.Input\r\n        style={styles.input}\r\n        wrapperStyle={styles.wrapper}\r\n        autoCapitalize=\"none\"\r\n        autoCorrect={false}\r\n        label=\"Пароль:\"\r\n        value={password}\r\n        onChangeText={(text) => {\r\n          setPassword(text);\r\n        }}\r\n      />\r\n      <Dialog.Button label=\"Отмена\" onPress={handleCancel} />\r\n      <Dialog.Button label=\"Войти\" onPress={handleLogin} />\r\n    </Dialog.Container>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  input: {\r\n    borderBottomColor: \"black\",\r\n    borderBottomWidth: 0.8,\r\n  },\r\n  wrapper: {},\r\n});\r\n","import React from \"react\";\r\n\r\nconst StompContext = React.createContext(null);\r\n\r\nexport default StompContext;\r\n","export const StompConfig = (username, token) => {\r\n  return {\r\n    brokerURL: \"wss://instanext-server.herokuapp.com/ws\", //production\r\n    //brokerURL: \"ws://192.168.100.50:5000/ws\", //home\r\n    //brokerURL: \"ws://192.168.0.50:5000/ws\", //office\r\n    connectHeaders: { sessionId: username, token: token },\r\n    appendMissingNULLonIncoming: true,\r\n    forceBinaryWSFrames: true,\r\n    debug: function (str) {\r\n      console.log(\"STOMP: \" + str);\r\n    },\r\n    reconnectDelay: 20000,\r\n    connectionTimeout: 1000,\r\n  };\r\n};\r\n\r\nexport const Subscription = (stomp, username, path, dispatch) => {\r\n  const subscription = stomp\r\n    .watch(\"/user/\" + username + \"/queue/\" + path)\r\n    .subscribe(function (message) {\r\n      const payload = JSON.parse(message.body);\r\n      const newMessage = payload.status;\r\n      dispatch(newMessage);\r\n    });\r\n\r\n  return subscription;\r\n};\r\n","import React from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\n\r\nexport const ConsoleLine = ({ message, index }) => {\r\n  return (\r\n    <View style={styles.line}>\r\n      <Text style={styles.index}>{index + 1}</Text>\r\n      <Text style={styles.message}>{message}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  line: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n  index: {\r\n    width: 50,\r\n    textAlign: \"right\",\r\n    color: \"#595959\",\r\n  },\r\n  message: {\r\n    paddingLeft: 20,\r\n    color: \"#d6d6d6\",\r\n  },\r\n});\r\n","import React, { useRef } from \"react\";\r\nimport { FlatList } from \"react-native-gesture-handler\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ConsoleLine } from \"./ConsoleLine\";\r\n\r\nexport const Console = () => {\r\n  const flatListRef = useRef(null);\r\n\r\n  const { logMessages } = useSelector((state) => state.messages);\r\n  const renderItem = ({ item, index }) => (\r\n    <ConsoleLine message={item} index={index} />\r\n  );\r\n\r\n  return (\r\n    <FlatList\r\n      style={{\r\n        width: \"100%\",\r\n        flexGrow: 0,\r\n        backgroundColor: \"#222222\",\r\n      }}\r\n      data={logMessages}\r\n      renderItem={renderItem}\r\n      keyExtractor={(item, index) => index.toString()}\r\n      contentContainerStyle={\r\n        {\r\n          // flexDirection: \"column-reverse\",\r\n        }\r\n      }\r\n      // stickyHeaderIndices={[0]}\r\n      // ListHeaderComponent={<Header />}\r\n      // ListFooterComponent={<Footer statusMessage={\"dfdfkdlfkjsl\"} />}\r\n      ref={flatListRef}\r\n      onContentSizeChange={() => {\r\n        flatListRef.current.scrollToEnd();\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport const ConsoleHeader = ({ statusMessage }) => {\r\n  const { lastStatusMessage } = useSelector((state) => state.messages);\r\n  return (\r\n    <View style={styles.root}>\r\n      <Text style={styles.title}>{lastStatusMessage}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"black\",\r\n    height: 50,\r\n    width: \"100%\",\r\n  },\r\n  title: {\r\n    color: \"white\",\r\n    paddingLeft: 22,\r\n  },\r\n});\r\n","import { Button } from \"native-base\";\r\nimport React, { useContext } from \"react\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Console } from \"../../components/console/Console\";\r\nimport { ConsoleHeader } from \"../../components/console/ConsoleHeader\";\r\nimport StompContext from \"../../contexts/StompContext\";\r\nimport UsersContext from \"../../contexts/UsersContext\";\r\nimport { clearMessages } from \"../../redux/messagesSlice\";\r\n\r\nconst AdminScreen = () => {\r\n  const [rxStomp] = useContext(StompContext);\r\n  const [users] = useContext(UsersContext);\r\n\r\n  const { status } = useSelector((state) => state.status);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleTest = async () => {\r\n    dispatch(clearMessages());\r\n    await rxStomp.activate();\r\n    setIsRunning(true);\r\n    const data = {\r\n      username: users[0].username,\r\n      token: users[0].token,\r\n    };\r\n\r\n    await rxStomp.publish({\r\n      destination: \"/app/test\",\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  const newLikeByTag = () => {\r\n    const data = {\r\n      username: users[0].username,\r\n      token: users[0].token,\r\n      tag: \"onedayinperu\",\r\n    };\r\n\r\n    rxStomp.publish({\r\n      destination: \"/app/newlike\",\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <Button\r\n        colorScheme=\"emerald\"\r\n        isLoading={status}\r\n        isLoadingText=\"в работе\"\r\n        onPress={handleTest}\r\n        variant=\"outline\"\r\n        size={\"sm\"}\r\n      >\r\n        Test\r\n      </Button>\r\n\r\n      <Button\r\n        colorScheme=\"emerald\"\r\n        size={\"sm\"}\r\n        variant=\"outline\"\r\n        onPress={newLikeByTag}\r\n      >\r\n        1212\r\n      </Button>\r\n\r\n      <ConsoleHeader />\r\n      <Console />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    marginTop: 10,\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n});\r\n\r\nexport default AdminScreen;\r\n","import React, { useContext } from \"react\";\r\nimport { Button, StyleSheet, View } from \"react-native\";\r\nimport { Console } from \"../../components/console/Console\";\r\nimport { ConsoleHeader } from \"../../components/console/ConsoleHeader\";\r\nimport StompContext from \"../../contexts/StompContext\";\r\nimport UsersContext from \"../../contexts/UsersContext\";\r\n\r\nconst FollowScreen = () => {\r\n  const [rxStomp] = useContext(StompContext);\r\n  const [users] = useContext(UsersContext);\r\n  const newLikeByTag = () => {\r\n    const data = {\r\n      username: users[0].username,\r\n      token: users[0].token,\r\n      tag: \"onedayinperu\",\r\n    };\r\n\r\n    rxStomp.publish({\r\n      destination: \"/app/newlike\",\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <Button title=\"1212\" onPress={newLikeByTag} />\r\n      <ConsoleHeader />\r\n      <Console />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    marginTop: 10,\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n});\r\n\r\nexport default FollowScreen;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Button, StyleSheet, View } from \"react-native\";\r\nimport { TextInput } from \"react-native-gesture-handler\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport StompContext from \"../contexts/StompContext\";\r\nimport UsersContext from \"../contexts/UsersContext\";\r\nimport { clearMessages } from \"../redux/messagesSlice\";\r\n\r\nconst Task = ({ taskName, destination, buttonName }) => {\r\n  const [rxStomp] = useContext(StompContext);\r\n  const [users] = useContext(UsersContext);\r\n\r\n  const [tag, setTag] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n  const { status } = useSelector((state) => state.status);\r\n\r\n  const handleRunTask = async () => {\r\n    if (tag === \"\") alert(\"Тег не может быть пустым!\");\r\n    let editedTag = tag;\r\n    editedTag = editedTag.replace(\"#\", \"\");\r\n\r\n    dispatch(clearMessages());\r\n    await rxStomp.activate();\r\n\r\n    const data = {\r\n      username: users[0].username,\r\n      token: users[0].token,\r\n      tag: editedTag,\r\n    };\r\n\r\n    await rxStomp.publish({\r\n      destination: destination,\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <TextInput\r\n        style={styles.textInput}\r\n        autoCapitalize=\"none\"\r\n        autoCorrect={false}\r\n        textAlign=\"center\"\r\n        value={tag}\r\n        placeholder={taskName}\r\n        onChangeText={(text) => setTag(text)}\r\n      />\r\n      <Button\r\n        title={!buttonName ? \"Старт\" : buttonName}\r\n        disabled={status}\r\n        onPress={handleRunTask}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  textInput: {\r\n    height: 40,\r\n    borderBottomColor: \"gray\",\r\n    borderBottomWidth: 1,\r\n    width: \"80%\",\r\n    marginVertical: 10,\r\n  },\r\n});\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport { Console } from \"../../components/console/Console\";\r\nimport { ConsoleHeader } from \"../../components/console/ConsoleHeader\";\r\nimport Task from \"../../components/Task\";\r\n\r\nconst LikeScreen = () => {\r\n  return (\r\n    <View style={styles.root}>\r\n      <Task taskName=\"Лайк\" destination=\"/app/like\" />\r\n      <Task taskName=\"Сохранение\" destination=\"/app/save\" />\r\n      <Task taskName=\"Лайк + сохранение\" destination=\"/app/likeandsave\" />\r\n      <Task taskName=\"Самолет\" destination=\"/app/sendmediatogroup\" />\r\n\r\n      <ConsoleHeader />\r\n      <Console />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    marginTop: 10,\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n});\r\n\r\nexport default LikeScreen;\r\n","import { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\nimport { RxStomp, RxStompState } from \"@stomp/rx-stomp\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { StatusBar, StyleSheet, Text, View } from \"react-native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport AddAccountDialog from \"../components/utils/AddAccountDialog\";\r\nimport DialogContext from \"../contexts/DialogContext\";\r\nimport StompContext from \"../contexts/StompContext\";\r\nimport UsersContext from \"../contexts/UsersContext\";\r\nimport {\r\n  getMessages,\r\n  receiveLogMessage,\r\n  receiveStatusMessage,\r\n} from \"../redux/messagesSlice\";\r\nimport { getStatus } from \"../redux/statusSlice\";\r\nimport { StompConfig, Subscription } from \"./../lib/stomp/Stomp\";\r\nimport AdminScreen from \"./TaskScreens/AdminScreen\";\r\nimport FollowScreen from \"./TaskScreens/FollowScreen\";\r\nimport LikeScreen from \"./TaskScreens/LikeScreen\";\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nconst HomeScreen = ({ navigation }) => {\r\n  const [rxStomp, setRxStomp] = useState(new RxStomp());\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [visible, setVisible] = useContext(DialogContext);\r\n\r\n  const username = users[0].username;\r\n  const token = users[0].token;\r\n\r\n  const { status } = useSelector((state) => state.status);\r\n\r\n  useEffect(() => {\r\n    status === true ? rxStomp.activate() : rxStomp.deactivate();\r\n  }, [status]);\r\n\r\n  rxStomp.configure(StompConfig(username, token));\r\n\r\n  const [state, setState] = useState();\r\n  useEffect(() => {\r\n    const subscription = rxStomp.connectionState$.subscribe(setState);\r\n    setIsConnected(state === RxStompState.OPEN);\r\n\r\n    return () => subscription.unsubscribe();\r\n  });\r\n\r\n  let subscriptionStatus;\r\n  let subscriptionLog;\r\n\r\n  const dispatch = useDispatch();\r\n  const dispatchStatus = (newStatusMessage) => {\r\n    dispatch(receiveStatusMessage(newStatusMessage));\r\n    dispatch(getStatus({ username: users[0].username }));\r\n  };\r\n  const dispatchLog = (newLogMessage) =>\r\n    dispatch(receiveLogMessage(newLogMessage));\r\n\r\n  useEffect(() => {\r\n    dispatch(getMessages({ username: users[0].username }));\r\n    dispatch(getStatus({ username: users[0].username }));\r\n\r\n    subscriptionStatus = Subscription(\r\n      rxStomp,\r\n      username,\r\n      \"status\",\r\n      dispatchStatus\r\n    );\r\n    subscriptionLog = Subscription(rxStomp, username, \"log\", dispatchLog);\r\n\r\n    return () => {\r\n      subscriptionStatus.unsubscribe();\r\n      subscriptionLog.unsubscribe();\r\n    };\r\n  }, [users]);\r\n\r\n  return (\r\n    <StompContext.Provider value={[rxStomp, isConnected, setIsConnected]}>\r\n      <View style={styles.root}>\r\n        <StatusBar backgroundColor={colors.white} barStyle=\"dark-content\" />\r\n        <AddAccountDialog\r\n          visible={visible}\r\n          setVisible={setVisible}\r\n          style={styles.dialog}\r\n        />\r\n        {false ? (\r\n          <Text>Соединение с сервером не установлено...</Text>\r\n        ) : (\r\n          <Tab.Navigator>\r\n            <Tab.Screen name=\"Лайки\">\r\n              {(props) => (\r\n                <LikeScreen\r\n                  {...props}\r\n                  isConnected={isConnected}\r\n                  visible={visible}\r\n                  setVisible={setVisible}\r\n                />\r\n              )}\r\n            </Tab.Screen>\r\n            <Tab.Screen name=\"Подписки\">\r\n              {(props) => <FollowScreen {...props} />}\r\n            </Tab.Screen>\r\n            {\r\n              <Tab.Screen name=\"Admin\">\r\n                {(props) => <AdminScreen {...props} />}\r\n              </Tab.Screen>\r\n            }\r\n          </Tab.Navigator>\r\n        )}\r\n      </View>\r\n    </StompContext.Provider>\r\n  );\r\n};\r\n\r\nexport default HomeScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: colors.themeColor,\r\n  },\r\n});\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, StyleSheet, Text, TextInput, View } from \"react-native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport UsersContext from \"../contexts/UsersContext\";\r\nimport axios from \"axios\";\r\n\r\nconst LoginScreen = ({ navigation }) => {\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const office = \"http://localhost:5000/api/v1/user/\";\r\n  const production = \"https://instanext-server.herokuapp.com/api/v1/user/\";\r\n\r\n  const handleLogin = () => {\r\n    axios\r\n      .post(production, {\r\n        username: username,\r\n        password: password,\r\n      })\r\n      .then(function (response) {\r\n        console.log(response);\r\n        const { data } = response;\r\n\r\n        const user = {\r\n          username: data.username,\r\n          profilePic: data.userProfilePic,\r\n          token: data.token,\r\n        };\r\n\r\n        storeInitialUser(user);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const storeInitialUser = async (user) => {\r\n    const usersArray = [];\r\n    usersArray.push(user);\r\n    try {\r\n      await AsyncStorage.setItem(\"users\", JSON.stringify(usersArray));\r\n    } catch (e) {}\r\n    try {\r\n      const usersStorage = JSON.parse(await AsyncStorage.getItem(\"users\"));\r\n      setUsers(usersStorage);\r\n    } catch (e) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (users.length) navigation.navigate(\"Home\");\r\n  }, [users]);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.titleText}>Авторизация</Text>\r\n      <TextInput\r\n        style={styles.textInput}\r\n        placeholder={\"Имя пользователя\"}\r\n        value={username}\r\n        onChangeText={(text) => {\r\n          setUsername(text);\r\n        }}\r\n      />\r\n      <TextInput\r\n        style={styles.textInput}\r\n        placeholder={\"Пароль\"}\r\n        secureTextEntry={true}\r\n        value={password}\r\n        onChangeText={(text) => {\r\n          setPassword(text);\r\n        }}\r\n      />\r\n      <Button title=\"Войти\" onPress={handleLogin} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default LoginScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n  },\r\n  titleText: {\r\n    fontSize: 30,\r\n    fontWeight: \"bold\",\r\n  },\r\n  textInput: {\r\n    margin: 20,\r\n    height: 40,\r\n    borderColor: \"red\",\r\n    borderWidth: 1,\r\n    width: \"80%\",\r\n  },\r\n});\r\n","import * as eva from \"@eva-design/eva\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { ApplicationProvider, IconRegistry } from \"@ui-kitten/components\";\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\nimport AppLoading from \"expo-app-loading\";\nimport { extendTheme, NativeBaseProvider } from \"native-base\";\nimport React, { useState } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { HomeScreenHeader } from \"./components/header/HomeScreenHeader\";\nimport DialogContext from \"./contexts/DialogContext\";\nimport UsersContext from \"./contexts/UsersContext\";\nimport store from \"./redux/store\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport LoginScreen from \"./screens/LoginScreen\";\n\nconst Stack = createStackNavigator();\n\nconst newColorTheme = {\n  brand: {\n    900: \"#8287af\",\n    800: \"#7c83db\",\n    700: \"#b3bef6\",\n  },\n};\nconst theme = extendTheme({ colors: newColorTheme });\n\nexport default function App() {\n  const [appLoaded, setAppLoaded] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [initialRoute, setInitialRoute] = useState(\"\");\n  const [currentUser, setLoggedInUsername] = useState(\"\");\n  const [userProfilePic, setUserProfilePic] = useState(\"\");\n  const [token, setToken] = useState(\"\");\n  const [users, setUsers] = useState([]);\n  const [visible, setVisible] = useState(false);\n\n  const getLoggedInUser = async () => {\n    // getCurrentUser\n    try {\n      const username = await AsyncStorage.getItem(\"@logged_in_user\"); // @current_user\n      if (username == null) {\n        setInitialRoute(\"Login\");\n      } else {\n        setIsLoggedIn(true);\n        setCurrentUserData(username);\n        // setUsers((users) => ({ username }, { ...users }));\n        let obj = { username: \"kflkl\", profilePic: \"dffd\" };\n        // setUsers(obj);\n        setInitialRoute(\"Home\");\n      }\n    } catch (e) {\n      alert(\"error getting logged in user\");\n    }\n  };\n\n  const setCurrentUserData = async (username) => {\n    try {\n      const jsonData = await AsyncStorage.getItem(username);\n      const data = JSON.parse(jsonData);\n      setToken(data.token); // setCurrentUserToken\n      setLoggedInUsername(username); // setCurrentUsername\n      setUserProfilePic(data.profilePic); // setCurrentUserProfilePicture\n    } catch {}\n  };\n\n  const storeUser = async (username, userData) => {\n    try {\n      let data = JSON.stringify(userData);\n      await AsyncStorage.setItem(username, data);\n    } catch (e) {\n      // saving error\n    }\n    storeLoggedInUser(username);\n  };\n  // storeCurrentUser\n  const storeLoggedInUser = async (username) => {\n    try {\n      await AsyncStorage.setItem(\"@logged_in_user\", username);\n    } catch (e) {\n      // error\n    }\n    await getLoggedInUser();\n  };\n  const storeNewUser = async (username, userData) => {\n    try {\n      let data = JSON.stringify(userData);\n      await AsyncStorage.setItem(username, data);\n    } catch (e) {}\n    try {\n      await AsyncStorage.setItem(\"@logged_in_user\", username);\n    } catch (e) {}\n    try {\n      d = await AsyncStorage.getItem(\"@logged_in_user\");\n    } catch (e) {}\n    await setLoggedInUsername(d);\n    await setCurrentUserData(d);\n  };\n  // START debug //\n\n  const getAllUsersExceptCurrentUser = async () => {\n    let keys = [];\n    try {\n      keys = await AsyncStorage.getAllKeys();\n    } catch (e) {\n      // read key error\n    }\n    let currentUser;\n    console.log(keys);\n    const index = keys.indexOf(\"@logged_in_user\");\n    if (index > -1) {\n      keys.splice(index, 1);\n    }\n    const index2 = keys.indexOf(currentUser);\n    console.log(index2);\n    if (index2 > -1) {\n      keys.splice(index2, 1);\n    }\n    let obj = [];\n    let profilePic;\n    await Promise.all(\n      keys.map(async (k, i) => {\n        try {\n          const jsonData = await AsyncStorage.getItem(k);\n          const data = JSON.parse(jsonData);\n          profilePic = data.profilePic;\n        } catch (e) {\n          console.log(\"failed loading profile picture\");\n        }\n        console.log(\"prof pic: \", profilePic);\n        console.log(\"key \" + i + \": \" + k);\n        obj.push({ username: k, profilePic: profilePic });\n      })\n    );\n    obj.map((i) => {\n      console.log(i.username, i.profilePic);\n    });\n    //setUsers((state) => [...state, ...obj]);\n\n    //setUsers((state) => [obj2, ...state]);\n  };\n\n  const getUsers = async () => {\n    try {\n      const users = JSON.parse(await AsyncStorage.getItem(\"users\"));\n      if (!users.length) {\n        setInitialRoute(\"Login\");\n      } else {\n        setIsLoggedIn(true);\n        setUsers(users);\n        setInitialRoute(\"Home\");\n      }\n    } catch (e) {\n      setInitialRoute(\"Login\");\n    }\n  };\n\n  const loadApp = async () => {\n    // const images = [require('./assets/snack-icon.png')];\n\n    /*  const cacheImages = images.map(image => {\n      return Asset.fromModule(image).downloadAsync();\n    });  */\n    return getUsers();\n  };\n\n  if (!appLoaded) {\n    return (\n      <AppLoading\n        startAsync={loadApp}\n        onFinish={() => {\n          //  getAllUsersExceptCurrentUser();\n          setAppLoaded(true);\n        }}\n        onError={() => {}}\n      />\n    );\n  }\n\n  return (\n    <Provider store={store}>\n      <IconRegistry icons={EvaIconsPack} />\n      <ApplicationProvider {...eva} theme={eva.light}>\n        <NativeBaseProvider theme={theme}>\n          <UsersContext.Provider value={[users, setUsers]}>\n            <DialogContext.Provider value={[visible, setVisible]}>\n              <NavigationContainer>\n                <Stack.Navigator initialRouteName={initialRoute}>\n                  <Stack.Screen\n                    name=\"Home\"\n                    options={({ navigation }) => {\n                      return {\n                        header: () => <HomeScreenHeader />,\n                      };\n                    }}\n                  >\n                    {(props) => (\n                      <HomeScreen\n                        {...props}\n                        isLoggedIn={isLoggedIn}\n                        loggedInUsername={currentUser}\n                        userProfilePic={userProfilePic}\n                        token={token}\n                        storeNewUser={storeNewUser}\n                        storeUser={storeUser}\n                      />\n                    )}\n                  </Stack.Screen>\n                  <Stack.Screen name=\"Login\">\n                    {(props) => <LoginScreen {...props} />}\n                  </Stack.Screen>\n                </Stack.Navigator>\n              </NavigationContainer>\n            </DialogContext.Provider>\n          </UsersContext.Provider>\n        </NativeBaseProvider>\n      </ApplicationProvider>\n    </Provider>\n  );\n}\n"],"sourceRoot":""}