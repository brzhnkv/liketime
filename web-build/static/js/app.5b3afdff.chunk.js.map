{"version":3,"sources":["contexts/DialogContext.js","contexts/UsersContext.js","components/header/HomeScreenHeader.js","redux/counterSlice.js","redux/messagesSlice.js","firebase/firebaseConfig.js","redux/saga/requests/messages.js","redux/saga/handlers/messages.js","redux/saga/rootSaga.js","redux/store.js","components/utils/AddAccountDialog.js","contexts/StompContext.js","lib/stomp/Stomp.js","components/console/ConsoleLine.js","components/console/Console.js","components/console/ConsoleHeader.js","screens/TaskScreens/AdminScreen.js","screens/TaskScreens/FollowScreen.js","components/Task.js","screens/TaskScreens/LikeScreen.js","screens/HomeScreen.js","screens/LoginScreen.js","App.js"],"names":["DialogContext","React","createContext","UsersContext","UserIcon","props","name","LogoutIcon","HomeScreenHeader","useContext","users","setUsers","setVisible","useState","isLogoutActive","setIsLogoutActive","reorderStoredUsers","username","a","async","usersArray","index","findIndex","x","unshift","splice","AsyncStorage","setItem","JSON","stringify","getItem","usersStorage","parse","production","menuVisible","setMenuVisible","toggleMenu","renderMenuAction","icon","View","style","styles","menuActionWrapper","onPress","useEffect","length","navigation","navigate","title","titleContainer","accessoryRight","anchor","visible","onBackdropPress","placement","backdropStyle","backdrop","onSelect","slice","map","user","key","accessoryLeft","source","profilePic","width","height","handleChangeAccount","disabled","axios","request","method","url","shift","handleLogout","StyleSheet","create","flexDirection","alignItems","logo","marginHorizontal","backgroundColor","display","counterSlice","createSlice","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","messages","status","statusMessages","logMessages","lastStatusMessage","getMessages","setMessages","receiveStatusMessage","push","receiveLogMessage","clearMessages","db","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getFirestore","requestGetMessages","docRef","doc","getDoc","docSnap","data","console","log","handleGetMessages","call","watcherSaga","takeLatest","type","sagaMiddleware","createSagaMiddleware","middleware","reducer","combineReducers","counter","counterReducer","messagesReducer","store","configureStore","getDefaultMiddleware","thunk","run","AddAccountDialog","setUsername","password","setPassword","handleCancel","Container","Title","Input","input","autoCapitalize","label","autoCorrect","onChangeText","text","wrapperStyle","wrapper","Button","post","then","response","alert","storeAdditionalUser","userProfilePic","token","catch","error","container","flex","justifyContent","borderBottomColor","borderBottomWidth","StompContext","Subscription","stomp","path","dispatch","watch","subscribe","message","newMessage","body","ConsoleLine","line","Text","textAlign","color","paddingLeft","Console","flatListRef","useRef","useSelector","flexGrow","renderItem","item","keyExtractor","toString","contentContainerStyle","ref","onContentSizeChange","current","scrollToEnd","ConsoleHeader","statusMessage","root","marginTop","AdminScreen","rxStomp","useDispatch","colorScheme","isLoading","isLoadingText","activate","setIsRunning","publish","destination","variant","size","tag","FollowScreen","textInput","marginVertical","Task","taskName","buttonName","setTag","placeholder","replace","LikeScreen","colors","Tab","createBottomTabNavigator","HomeScreen","RxStomp","isConnected","setIsConnected","deactivate","configure","brokerURL","connectHeaders","sessionId","appendMissingNULLonIncoming","forceBinaryWSFrames","debug","str","reconnectDelay","connectionTimeout","StompConfig","subscriptionStatus","subscriptionLog","setState","subscription","connectionState$","RxStompState","OPEN","unsubscribe","onSnapshot","exists","unsub","dispatchStatus","newStatusMessage","dispatchLog","newLogMessage","Provider","StatusBar","barStyle","dialog","Navigator","Screen","LoginScreen","storeInitialUser","titleText","TextInput","secureTextEntry","errorMessage","fontSize","fontWeight","margin","borderColor","borderWidth","Stack","createStackNavigator","theme","extendTheme","brand","900","800","700","App","appLoaded","setAppLoaded","isLoggedIn","setIsLoggedIn","initialRoute","setInitialRoute","currentUser","setLoggedInUsername","setUserProfilePic","setToken","getLoggedInUser","setCurrentUserData","jsonData","storeUser","userData","storeLoggedInUser","storeNewUser","d","getUsers","icons","EvaIconsPack","eva","NavigationContainer","initialRouteName","options","header","loggedInUsername","startAsync","onFinish","onError"],"mappings":"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","file":"static/js/app.5b3afdff.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst DialogContext = React.createContext(null);\r\n\r\nexport default DialogContext;\r\n","import React from \"react\";\r\n\r\nconst UsersContext = React.createContext(null);\r\n\r\nexport default UsersContext;\r\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport {\r\n  Avatar,\r\n  Icon,\r\n  MenuItem,\r\n  OverflowMenu,\r\n  Text,\r\n  TopNavigation,\r\n  TopNavigationAction,\r\n} from \"@ui-kitten/components\";\r\nimport axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Image, StyleSheet, View } from \"react-native\";\r\n\r\nimport DialogContext from \"../../contexts/DialogContext\";\r\nimport UsersContext from \"../../contexts/UsersContext\";\r\n\r\nconst UserIcon = (props) => <Icon {...props} name=\"person-add\" />;\r\nconst LogoutIcon = (props) => <Icon {...props} name=\"log-out\" />;\r\n\r\nexport const HomeScreenHeader = () => {\r\n  //const [rxStomp] = useContext(StompContext);\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [visible, setVisible] = useContext(DialogContext);\r\n\r\n  const [isLogoutActive, setIsLogoutActive] = useState(true);\r\n\r\n  const handleAddAccount = () => {\r\n    toggleMenu();\r\n    setVisible(true);\r\n  };\r\n\r\n  const reorderStoredUsers = async (username) => {\r\n    const usersArray = [...users];\r\n    const index = usersArray.findIndex((x) => x.username === username);\r\n    usersArray.unshift(usersArray.splice(index, 1)[0]);\r\n    try {\r\n      await AsyncStorage.setItem(\"users\", JSON.stringify(usersArray));\r\n    } catch (e) {}\r\n    try {\r\n      const usersStorage = JSON.parse(await AsyncStorage.getItem(\"users\"));\r\n      setUsers(usersStorage);\r\n    } catch (e) {}\r\n  };\r\n\r\n  const handleChangeAccount = async (user) => {\r\n    toggleMenu();\r\n    //await rxStomp.deactivate();\r\n    await reorderStoredUsers(user);\r\n    //await rxStomp.activate();\r\n  };\r\n\r\n  const office = `http://localhost:5000/api/v1/user/${users[0].username}`;\r\n  const production = `https://instanext-server.herokuapp.com/api/v1/user/${users[0].username}`;\r\n\r\n  const handleLogout = async () => {\r\n    toggleMenu();\r\n    setIsLogoutActive(false);\r\n    // await rxStomp.deactivate();\r\n    axios.request({\r\n      method: \"DELETE\",\r\n      url: production,\r\n    });\r\n\r\n    const usersArray = [...users];\r\n    usersArray.shift();\r\n\r\n    try {\r\n      await AsyncStorage.setItem(\"users\", JSON.stringify(usersArray));\r\n    } catch (e) {}\r\n    try {\r\n      const usersStorage = JSON.parse(await AsyncStorage.getItem(\"users\"));\r\n      setUsers(usersStorage);\r\n    } catch (e) {}\r\n    //await rxStomp.activate();\r\n    setIsLogoutActive(true);\r\n  };\r\n\r\n  const [menuVisible, setMenuVisible] = React.useState(false);\r\n\r\n  const toggleMenu = () => {\r\n    setMenuVisible(!menuVisible);\r\n  };\r\n\r\n  const renderMenuAction = () => (\r\n    <TopNavigationAction\r\n      icon={() => (\r\n        <View style={styles.menuActionWrapper}>\r\n          {/*  <Image // here wast Avatar to show image\r\n            //defaultSource={{ uri: \"/assets/icon.png\" }}\r\n            source={{ uri: users[0].profilePic }}\r\n            alt=\"\"\r\n            height={50}\r\n            width={50}\r\n          /> */}\r\n          <Text //style={styles.text}\r\n          >\r\n            {users[0].username}\r\n          </Text>\r\n        </View>\r\n      )}\r\n      onPress={toggleMenu}\r\n    ></TopNavigationAction>\r\n  );\r\n\r\n  const renderOverflowMenuAction = () => (\r\n    <OverflowMenu\r\n      anchor={renderMenuAction}\r\n      visible={menuVisible}\r\n      onBackdropPress={toggleMenu}\r\n      placement={\"bottom end\"}\r\n      backdropStyle={styles.backdrop}\r\n      onSelect={toggleMenu}\r\n    >\r\n      {users.slice(1).map((user) => {\r\n        return (\r\n          <MenuItem\r\n            key={user.username}\r\n            accessoryLeft={() => (\r\n              <Avatar\r\n                source={user.profilePic}\r\n                style={{ width: 30, height: 30 }}\r\n              />\r\n            )}\r\n            title={user.username}\r\n            onPress={(title) => handleChangeAccount(title)}\r\n          ></MenuItem>\r\n        );\r\n      })}\r\n      <MenuItem\r\n        accessoryLeft={UserIcon}\r\n        title=\"Добавить аккаунт\"\r\n        onPress={() => handleAddAccount()}\r\n      />\r\n      <MenuItem\r\n        accessoryLeft={LogoutIcon}\r\n        title=\"Выйти из системы\"\r\n        disabled={!isLogoutActive}\r\n        onPress={() => handleLogout()}\r\n      />\r\n    </OverflowMenu>\r\n  );\r\n\r\n  const renderTitle = (props) => (\r\n    <View style={styles.titleContainer}>\r\n      {/*  <Avatar style={styles.logo} source={require(\"../../assets/icon.png\")} /> */}\r\n      <Text {...props}>LikeTime</Text>\r\n    </View>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!users.length) navigation.navigate(\"Home\");\r\n  }, [users]);\r\n\r\n  return (\r\n    <TopNavigation\r\n      title={renderTitle}\r\n      accessoryRight={renderOverflowMenuAction}\r\n    />\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  titleContainer: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n  logo: {\r\n    marginHorizontal: 16,\r\n  },\r\n  backdrop: {\r\n    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n  },\r\n  menuActionWrapper: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"flex-end\",\r\n  },\r\n});\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\nexport default counterSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const messages = createSlice({\r\n  name: \"messages\",\r\n  initialState: {\r\n    status: false,\r\n    statusMessages: [],\r\n    logMessages: [],\r\n    lastStatusMessage: \"\",\r\n  },\r\n  reducers: {\r\n    getMessages() {},\r\n    setMessages(state, action) {\r\n      const { status, statusMessages, logMessages } = action.payload;\r\n      return {\r\n        ...state,\r\n        statusMessages,\r\n        logMessages,\r\n        lastStatusMessage: statusMessages[statusMessages.length - 1],\r\n        status: status,\r\n      };\r\n    },\r\n\r\n    receiveStatusMessage: (state, action) => {\r\n      ({\r\n        ...state,\r\n        statusMessages: state.statusMessages.push(action.payload),\r\n      });\r\n      state.lastStatusMessage =\r\n        state.statusMessages[state.statusMessages.length - 1];\r\n    },\r\n\r\n    receiveLogMessage: (state, action) => {\r\n      ({\r\n        ...state,\r\n        logMessages: state.logMessages.push(action.payload),\r\n      });\r\n    },\r\n    clearMessages() {\r\n      return {\r\n        statusMessages: [],\r\n        logMessages: [],\r\n        status: false,\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const {\r\n  getMessages,\r\n  setMessages,\r\n  receiveStatusMessage,\r\n  receiveLogMessage,\r\n  clearMessages,\r\n} = messages.actions;\r\n\r\nexport default messages.reducer;\r\n","import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDUvepMMzgNGs8i7UWckIJDiOxq59vPsW0\",\r\n  authDomain: \"liketime-server.firebaseapp.com\",\r\n  projectId: \"liketime-server\",\r\n  storageBucket: \"liketime-server.appspot.com\",\r\n  messagingSenderId: \"369110340364\",\r\n  appId: \"1:369110340364:web:a415673372c20c39c66f29\",\r\n  measurementId: \"G-R25JK2PYV8\",\r\n};\r\n\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nexport const db = getFirestore();\r\n","import { db } from \"../../../firebase/firebaseConfig\";\r\nimport { doc, getDoc } from \"firebase/firestore\";\r\n\r\nexport const requestGetMessages = async (username) => {\r\n  const docRef = doc(db, \"messages\", username);\r\n  const docSnap = await getDoc(docRef);\r\n\r\n  /* if (docSnap.exists()) {\r\n    console.log(\"Document data:\", docSnap.data());\r\n  } else {\r\n    // doc.data() will be undefined in this case\r\n    console.log(\"No such document!\");\r\n  } */\r\n\r\n  const data = docSnap.data();\r\n  console.log(data);\r\n  return data;\r\n};\r\n","import { call, put } from \"redux-saga/effects\";\r\nimport { setMessages } from \"../../messagesSlice\";\r\nimport { requestGetMessages } from \"../requests/messages\";\r\n\r\nexport function* handleGetMessages(action) {\r\n  try {\r\n    const { payload } = action;\r\n    const { username } = payload;\r\n    const response = yield call(requestGetMessages, username);\r\n    // yield put(setMessages({ ...response }));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n","import { takeLatest } from \"redux-saga/effects\";\r\nimport { getMessages } from \"../messagesSlice\";\r\nimport { handleGetMessages } from \"./handlers/messages\";\r\n\r\nexport function* watcherSaga() {\r\n  yield takeLatest(getMessages.type, handleGetMessages);\r\n}\r\n","import {\r\n  configureStore,\r\n  combineReducers,\r\n  getDefaultMiddleware,\r\n} from \"@reduxjs/toolkit\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport counterReducer from \"./counterSlice\";\r\n\r\nimport { watcherSaga } from \"./saga/rootSaga\";\r\nimport messagesReducer from \"./messagesSlice\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleware = [sagaMiddleware];\r\n\r\nconst reducer = combineReducers({\r\n  counter: counterReducer,\r\n\r\n  messages: messagesReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer,\r\n  middleware: [...getDefaultMiddleware({ thunk: false }), ...middleware],\r\n});\r\n\r\nsagaMiddleware.run(watcherSaga);\r\n\r\nexport default store;\r\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport axios from \"axios\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { StyleSheet } from \"react-native\";\r\nimport Dialog from \"react-native-dialog\";\r\nimport UsersContext from \"../../contexts/UsersContext\";\r\n\r\nexport default function AddAccountDialog({ visible, setVisible }) {\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const storeAdditionalUser = async (user) => {\r\n    const usersArray = [...users];\r\n    usersArray.push(user);\r\n    const index = usersArray.findIndex((x) => x.username === user.username);\r\n    usersArray.unshift(usersArray.splice(index, 1)[0]);\r\n    try {\r\n      await AsyncStorage.setItem(\"users\", JSON.stringify(usersArray));\r\n    } catch (e) {\r\n      alert(\"error1\");\r\n    }\r\n    try {\r\n      const usersStorage = JSON.parse(await AsyncStorage.getItem(\"users\"));\r\n      setUsers(usersStorage);\r\n    } catch (e) {\r\n      alert(\"error2\");\r\n    }\r\n  };\r\n\r\n  const showDialog = () => {\r\n    setVisible(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    axios\r\n      .post(\"https://instanext-server.herokuapp.com/api/v1/user/\", {\r\n        username: username,\r\n        password: password,\r\n      })\r\n      .then(function (response) {\r\n        console.log(response);\r\n        const { data } = response;\r\n\r\n        const user = {\r\n          username: data.username,\r\n          profilePic: data.userProfilePic,\r\n          token: data.token,\r\n        };\r\n\r\n        storeAdditionalUser(user);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n\r\n    setVisible(false);\r\n  };\r\n\r\n  return (\r\n    <Dialog.Container visible={visible} onBackdropPress={handleCancel}>\r\n      <Dialog.Title>Добавление аккаунта</Dialog.Title>\r\n      <Dialog.Input\r\n        style={styles.input}\r\n        autoCapitalize=\"none\"\r\n        label=\"Имя пользователя:\"\r\n        autoCorrect={false}\r\n        value={username}\r\n        onChangeText={(text) => {\r\n          setUsername(text);\r\n        }}\r\n      ></Dialog.Input>\r\n\r\n      <Dialog.Input\r\n        style={styles.input}\r\n        wrapperStyle={styles.wrapper}\r\n        autoCapitalize=\"none\"\r\n        autoCorrect={false}\r\n        label=\"Пароль:\"\r\n        value={password}\r\n        onChangeText={(text) => {\r\n          setPassword(text);\r\n        }}\r\n      />\r\n      <Dialog.Button label=\"Отмена\" onPress={handleCancel} />\r\n      <Dialog.Button label=\"Войти\" onPress={handleLogin} />\r\n    </Dialog.Container>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"#fff\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  input: {\r\n    borderBottomColor: \"black\",\r\n    borderBottomWidth: 0.8,\r\n  },\r\n  wrapper: {},\r\n});\r\n","import React from \"react\";\r\n\r\nconst StompContext = React.createContext(null);\r\n\r\nexport default StompContext;\r\n","export const StompConfig = (username, token) => {\r\n  return {\r\n    brokerURL: \"wss://instanext-server.herokuapp.com/ws\", //production\r\n    //brokerURL: \"ws://192.168.100.10:5000/ws\", //home\r\n    //brokerURL: \"ws://192.168.0.50:5000/ws\", //office\r\n    connectHeaders: { sessionId: username, token: token },\r\n    appendMissingNULLonIncoming: true,\r\n    forceBinaryWSFrames: true,\r\n    debug: function (str) {\r\n      console.log(\"STOMP: \" + str);\r\n    },\r\n    reconnectDelay: 10000,\r\n    connectionTimeout: 5000,\r\n  };\r\n};\r\n\r\nexport const Subscription = (stomp, username, path, dispatch) => {\r\n  const subscription = stomp\r\n    .watch(\"/user/\" + username + \"/queue/\" + path)\r\n    .subscribe(function (message) {\r\n      const payload = JSON.parse(message.body);\r\n      const newMessage = payload.status;\r\n      dispatch(newMessage);\r\n    });\r\n\r\n  return subscription;\r\n};\r\n","import React from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\n\r\nexport const ConsoleLine = ({ message, index }) => {\r\n  return (\r\n    <View style={styles.line}>\r\n      <Text style={styles.index}>{index + 1}</Text>\r\n      <Text style={styles.message}>{message}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  line: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n  index: {\r\n    width: 50,\r\n    textAlign: \"right\",\r\n    color: \"#595959\",\r\n  },\r\n  message: {\r\n    paddingLeft: 20,\r\n    color: \"#d6d6d6\",\r\n  },\r\n});\r\n","import React, { useRef } from \"react\";\r\nimport { FlatList } from \"react-native-gesture-handler\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ConsoleLine } from \"./ConsoleLine\";\r\n\r\nexport const Console = () => {\r\n  const flatListRef = useRef(null);\r\n\r\n  const { logMessages } = useSelector((state) => state.messages);\r\n  const renderItem = ({ item, index }) => (\r\n    <ConsoleLine message={item} index={index} />\r\n  );\r\n\r\n  return (\r\n    <FlatList\r\n      style={{\r\n        width: \"100%\",\r\n        flexGrow: 0,\r\n        backgroundColor: \"#222222\",\r\n      }}\r\n      data={logMessages}\r\n      renderItem={renderItem}\r\n      keyExtractor={(item, index) => index.toString()}\r\n      contentContainerStyle={\r\n        {\r\n          // flexDirection: \"column-reverse\",\r\n        }\r\n      }\r\n      // stickyHeaderIndices={[0]}\r\n      // ListHeaderComponent={<Header />}\r\n      // ListFooterComponent={<Footer statusMessage={\"dfdfkdlfkjsl\"} />}\r\n      ref={flatListRef}\r\n      onContentSizeChange={() => {\r\n        flatListRef.current.scrollToEnd();\r\n      }}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nexport const ConsoleHeader = ({ statusMessage }) => {\r\n  const { lastStatusMessage } = useSelector((state) => state.messages);\r\n  return (\r\n    <View style={styles.root}>\r\n      <Text style={styles.title}>{lastStatusMessage}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"black\",\r\n    height: 50,\r\n    width: \"100%\",\r\n  },\r\n  title: {\r\n    color: \"white\",\r\n    paddingLeft: 22,\r\n  },\r\n});\r\n","import { Button } from \"native-base\";\r\nimport React, { useContext } from \"react\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Console } from \"../../components/console/Console\";\r\nimport { ConsoleHeader } from \"../../components/console/ConsoleHeader\";\r\nimport StompContext from \"../../contexts/StompContext\";\r\nimport UsersContext from \"../../contexts/UsersContext\";\r\nimport { clearMessages } from \"../../redux/messagesSlice\";\r\n\r\nconst AdminScreen = () => {\r\n  const [rxStomp] = useContext(StompContext);\r\n  const [users] = useContext(UsersContext);\r\n\r\n  const { status } = useSelector((state) => state.status);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleTest = async () => {\r\n    dispatch(clearMessages());\r\n    await rxStomp.activate();\r\n    setIsRunning(true);\r\n    const data = {\r\n      username: users[0].username,\r\n      token: users[0].token,\r\n    };\r\n\r\n    await rxStomp.publish({\r\n      destination: \"/app/test\",\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  const newLikeByTag = () => {\r\n    const data = {\r\n      username: users[0].username,\r\n      token: users[0].token,\r\n      tag: \"onedayinperu\",\r\n    };\r\n\r\n    rxStomp.publish({\r\n      destination: \"/app/newlike\",\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <Button\r\n        colorScheme=\"emerald\"\r\n        isLoading={status}\r\n        isLoadingText=\"в работе\"\r\n        onPress={handleTest}\r\n        variant=\"outline\"\r\n        size={\"sm\"}\r\n      >\r\n        Test\r\n      </Button>\r\n\r\n      <Button\r\n        colorScheme=\"emerald\"\r\n        size={\"sm\"}\r\n        variant=\"outline\"\r\n        onPress={newLikeByTag}\r\n      >\r\n        1212\r\n      </Button>\r\n\r\n      <ConsoleHeader />\r\n      <Console />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    marginTop: 10,\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n});\r\n\r\nexport default AdminScreen;\r\n","import React, { useContext } from \"react\";\r\nimport { Button, StyleSheet, View } from \"react-native\";\r\nimport { Console } from \"../../components/console/Console\";\r\nimport { ConsoleHeader } from \"../../components/console/ConsoleHeader\";\r\nimport StompContext from \"../../contexts/StompContext\";\r\nimport UsersContext from \"../../contexts/UsersContext\";\r\n\r\nconst FollowScreen = () => {\r\n  const [rxStomp] = useContext(StompContext);\r\n  const [users] = useContext(UsersContext);\r\n  const newLikeByTag = () => {\r\n    const data = {\r\n      username: users[0].username,\r\n      token: users[0].token,\r\n      tag: \"onedayinperu\",\r\n    };\r\n\r\n    rxStomp.publish({\r\n      destination: \"/app/newlike\",\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <Button title=\"1212\" onPress={newLikeByTag} />\r\n      <ConsoleHeader />\r\n      <Console />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    marginTop: 10,\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n});\r\n\r\nexport default FollowScreen;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Button, StyleSheet, View } from \"react-native\";\r\nimport { TextInput } from \"react-native-gesture-handler\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport StompContext from \"../contexts/StompContext\";\r\nimport UsersContext from \"../contexts/UsersContext\";\r\nimport { clearMessages } from \"../redux/messagesSlice\";\r\n\r\nconst Task = ({ taskName, destination, buttonName }) => {\r\n  const [rxStomp] = useContext(StompContext);\r\n  const [users] = useContext(UsersContext);\r\n\r\n  const [tag, setTag] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n  const { status } = useSelector((state) => state.messages);\r\n\r\n  const handleRunTask = async () => {\r\n    if (tag === \"\") alert(\"Тег не может быть пустым!\");\r\n    let editedTag = tag;\r\n    editedTag = editedTag.replace(\"#\", \"\");\r\n    editedTag = editedTag.replace(/\\s/g, \"\");\r\n\r\n    //dispatch(clearMessages());\r\n    await rxStomp.activate();\r\n\r\n    const data = {\r\n      username: users[0].username,\r\n      token: users[0].token,\r\n      tag: tag,\r\n    };\r\n\r\n    await rxStomp.publish({\r\n      destination: destination,\r\n      body: JSON.stringify(data),\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <TextInput\r\n        style={styles.textInput}\r\n        autoCapitalize=\"none\"\r\n        autoCorrect={false}\r\n        textAlign=\"center\"\r\n        value={tag}\r\n        placeholder={taskName}\r\n        onChangeText={(text) => setTag(text)}\r\n      />\r\n      <Button\r\n        title={!buttonName ? \"Старт\" : buttonName}\r\n        disabled={status}\r\n        onPress={handleRunTask}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  textInput: {\r\n    height: 40,\r\n    borderBottomColor: \"gray\",\r\n    borderBottomWidth: 1,\r\n    width: \"80%\",\r\n    marginVertical: 10,\r\n  },\r\n});\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport { Button, StyleSheet, View } from \"react-native\";\r\nimport { Console } from \"../../components/console/Console\";\r\nimport { ConsoleHeader } from \"../../components/console/ConsoleHeader\";\r\nimport Task from \"../../components/Task\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport { firebaseConfig } from \"../../firebase/firebaseConfig\";\r\n\r\nconst LikeScreen = () => {\r\n  return (\r\n    <View style={styles.root}>\r\n      <Task taskName=\"Лайк\" destination=\"/app/like\" />\r\n      <Task taskName=\"Сохранение\" destination=\"/app/save\" />\r\n      <Task taskName=\"Лайк + сохранение\" destination=\"/app/likeandsave\" />\r\n      <Task taskName=\"Самолет\" destination=\"/app/sendmediatogroup\" />\r\n\r\n      <ConsoleHeader />\r\n      <Console />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    marginTop: 10,\r\n    alignItems: \"center\",\r\n    justifyContent: \"flex-start\",\r\n  },\r\n});\r\n\r\nexport default LikeScreen;\r\n","import { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\nimport { RxStomp, RxStompState } from \"@stomp/rx-stomp\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { StatusBar, StyleSheet, Text, View } from \"react-native\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport AddAccountDialog from \"../components/utils/AddAccountDialog\";\r\nimport DialogContext from \"../contexts/DialogContext\";\r\nimport StompContext from \"../contexts/StompContext\";\r\nimport UsersContext from \"../contexts/UsersContext\";\r\nimport {\r\n  getMessages,\r\n  receiveLogMessage,\r\n  receiveStatusMessage,\r\n  setMessages,\r\n} from \"../redux/messagesSlice\";\r\nimport { StompConfig, Subscription } from \"./../lib/stomp/Stomp\";\r\nimport AdminScreen from \"./TaskScreens/AdminScreen\";\r\nimport FollowScreen from \"./TaskScreens/FollowScreen\";\r\nimport LikeScreen from \"./TaskScreens/LikeScreen\";\r\nimport { db } from \"../firebase/firebaseConfig\";\r\nimport { doc, getDoc, onSnapshot } from \"firebase/firestore\";\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst Tab = createBottomTabNavigator();\r\n\r\nconst HomeScreen = ({ navigation }) => {\r\n  const [rxStomp, setRxStomp] = useState(new RxStomp());\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [visible, setVisible] = useContext(DialogContext);\r\n\r\n  const username = users[0].username;\r\n  const token = users[0].token;\r\n\r\n  const { status } = useSelector((state) => state.messages);\r\n\r\n  useEffect(() => {\r\n    console.log(JSON.stringify(status));\r\n    const func = async () => {\r\n      status === true ? await rxStomp.activate() : await rxStomp.deactivate();\r\n    };\r\n    func();\r\n  }, [status]);\r\n\r\n  rxStomp.configure(StompConfig(username, token));\r\n\r\n  const [state, setState] = useState();\r\n  useEffect(() => {\r\n    const subscription = rxStomp.connectionState$.subscribe(setState);\r\n    setIsConnected(state === RxStompState.OPEN);\r\n\r\n    return () => subscription.unsubscribe();\r\n  });\r\n\r\n  useEffect(() => {\r\n    const req = async () => {\r\n      const unsub = onSnapshot(doc(db, \"messages\", username), (doc) => {\r\n        if (doc.exists()) {\r\n          const response = doc.data();\r\n          console.log(\"Document data:\", response);\r\n          dispatch(setMessages({ ...response }));\r\n        } else {\r\n          // doc.data() will be undefined in this case\r\n          console.log(\"No such document!\");\r\n        }\r\n      });\r\n    };\r\n    req();\r\n    return () => unsub();\r\n  }, []);\r\n\r\n  let subscriptionStatus;\r\n  let subscriptionLog;\r\n\r\n  const dispatch = useDispatch();\r\n  const dispatchStatus = (newStatusMessage) => {\r\n    dispatch(receiveStatusMessage(newStatusMessage));\r\n    dispatch(getMessages({ username: users[0].username }));\r\n  };\r\n  const dispatchLog = (newLogMessage) =>\r\n    dispatch(receiveLogMessage(newLogMessage));\r\n\r\n  useEffect(() => {\r\n    dispatch(getMessages({ username: users[0].username }));\r\n\r\n    subscriptionStatus = Subscription(\r\n      rxStomp,\r\n      username,\r\n      \"status\",\r\n      dispatchStatus\r\n    );\r\n    subscriptionLog = Subscription(rxStomp, username, \"log\", dispatchLog);\r\n\r\n    return () => {\r\n      subscriptionStatus.unsubscribe();\r\n      subscriptionLog.unsubscribe();\r\n    };\r\n  }, [users]);\r\n\r\n  return (\r\n    <StompContext.Provider value={[rxStomp, isConnected, setIsConnected]}>\r\n      <View style={styles.root}>\r\n        <StatusBar backgroundColor={colors.white} barStyle=\"dark-content\" />\r\n        <AddAccountDialog\r\n          visible={visible}\r\n          setVisible={setVisible}\r\n          style={styles.dialog}\r\n        />\r\n        {false ? (\r\n          <Text>Соединение с сервером не установлено...</Text>\r\n        ) : (\r\n          <Tab.Navigator>\r\n            <Tab.Screen name=\"Лайки\">\r\n              {(props) => (\r\n                <LikeScreen\r\n                  {...props}\r\n                  isConnected={isConnected}\r\n                  visible={visible}\r\n                  setVisible={setVisible}\r\n                />\r\n              )}\r\n            </Tab.Screen>\r\n            <Tab.Screen name=\"Подписки\">\r\n              {(props) => <FollowScreen {...props} />}\r\n            </Tab.Screen>\r\n            {\r\n              <Tab.Screen name=\"Admin\">\r\n                {(props) => <AdminScreen {...props} />}\r\n              </Tab.Screen>\r\n            }\r\n          </Tab.Navigator>\r\n        )}\r\n      </View>\r\n    </StompContext.Provider>\r\n  );\r\n};\r\n\r\nexport default HomeScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: colors.themeColor,\r\n  },\r\n});\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, StyleSheet, Text, TextInput, View } from \"react-native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport UsersContext from \"../contexts/UsersContext\";\r\nimport axios from \"axios\";\r\n\r\nconst LoginScreen = ({ navigation }) => {\r\n  const [users, setUsers] = useContext(UsersContext);\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const office = \"http://localhost:5000/api/v1/user/\";\r\n  const production = \"https://instanext-server.herokuapp.com/api/v1/user/\";\r\n\r\n  const handleLogin = () => {\r\n    axios\r\n      .post(production, {\r\n        username: username,\r\n        password: password,\r\n      })\r\n      .then(function (response) {\r\n        console.log(response);\r\n        const { data } = response;\r\n\r\n        if (data.error === \"true\") alert(data.errorMessage);\r\n\r\n        const user = {\r\n          username: data.username,\r\n          profilePic: data.userProfilePic,\r\n          token: data.token,\r\n        };\r\n\r\n        storeInitialUser(user);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const storeInitialUser = async (user) => {\r\n    const usersArray = [];\r\n    usersArray.push(user);\r\n    try {\r\n      await AsyncStorage.setItem(\"users\", JSON.stringify(usersArray));\r\n    } catch (e) {}\r\n    try {\r\n      const usersStorage = JSON.parse(await AsyncStorage.getItem(\"users\"));\r\n      setUsers(usersStorage);\r\n    } catch (e) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (users.length) navigation.navigate(\"Home\");\r\n  }, [users]);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.titleText}>Авторизация</Text>\r\n      <TextInput\r\n        style={styles.textInput}\r\n        placeholder={\"Имя пользователя\"}\r\n        value={username}\r\n        onChangeText={(text) => {\r\n          setUsername(text);\r\n        }}\r\n      />\r\n      <TextInput\r\n        style={styles.textInput}\r\n        placeholder={\"Пароль\"}\r\n        secureTextEntry={true}\r\n        value={password}\r\n        onChangeText={(text) => {\r\n          setPassword(text);\r\n        }}\r\n      />\r\n      <Button title=\"Войти\" onPress={handleLogin} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default LoginScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n  },\r\n  titleText: {\r\n    fontSize: 30,\r\n    fontWeight: \"bold\",\r\n  },\r\n  textInput: {\r\n    margin: 20,\r\n    height: 40,\r\n    borderColor: \"red\",\r\n    borderWidth: 1,\r\n    width: \"80%\",\r\n  },\r\n});\r\n","import * as eva from \"@eva-design/eva\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport { ApplicationProvider, IconRegistry } from \"@ui-kitten/components\";\r\nimport { EvaIconsPack } from \"@ui-kitten/eva-icons\";\r\nimport AppLoading from \"expo-app-loading\";\r\nimport { extendTheme, NativeBaseProvider } from \"native-base\";\r\nimport React, { useState } from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { HomeScreenHeader } from \"./components/header/HomeScreenHeader\";\r\nimport DialogContext from \"./contexts/DialogContext\";\r\nimport UsersContext from \"./contexts/UsersContext\";\r\nimport store from \"./redux/store\";\r\nimport HomeScreen from \"./screens/HomeScreen\";\r\nimport LoginScreen from \"./screens/LoginScreen\";\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nconst newColorTheme = {\r\n  brand: {\r\n    900: \"#8287af\",\r\n    800: \"#7c83db\",\r\n    700: \"#b3bef6\",\r\n  },\r\n};\r\nconst theme = extendTheme({ colors: newColorTheme });\r\n\r\nexport default function App() {\r\n  const [appLoaded, setAppLoaded] = useState(false);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [initialRoute, setInitialRoute] = useState(\"\");\r\n  const [currentUser, setLoggedInUsername] = useState(\"\");\r\n  const [userProfilePic, setUserProfilePic] = useState(\"\");\r\n  const [token, setToken] = useState(\"\");\r\n  const [users, setUsers] = useState([]);\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const getLoggedInUser = async () => {\r\n    // getCurrentUser\r\n    try {\r\n      const username = await AsyncStorage.getItem(\"@logged_in_user\"); // @current_user\r\n      if (username == null) {\r\n        setInitialRoute(\"Login\");\r\n      } else {\r\n        setIsLoggedIn(true);\r\n        setCurrentUserData(username);\r\n        // setUsers((users) => ({ username }, { ...users }));\r\n        let obj = { username: \"kflkl\", profilePic: \"dffd\" };\r\n        // setUsers(obj);\r\n        setInitialRoute(\"Home\");\r\n      }\r\n    } catch (e) {\r\n      alert(\"error getting logged in user\");\r\n    }\r\n  };\r\n\r\n  const setCurrentUserData = async (username) => {\r\n    try {\r\n      const jsonData = await AsyncStorage.getItem(username);\r\n      const data = JSON.parse(jsonData);\r\n      setToken(data.token); // setCurrentUserToken\r\n      setLoggedInUsername(username); // setCurrentUsername\r\n      setUserProfilePic(data.profilePic); // setCurrentUserProfilePicture\r\n    } catch {}\r\n  };\r\n\r\n  const storeUser = async (username, userData) => {\r\n    try {\r\n      let data = JSON.stringify(userData);\r\n      await AsyncStorage.setItem(username, data);\r\n    } catch (e) {\r\n      // saving error\r\n    }\r\n    storeLoggedInUser(username);\r\n  };\r\n  // storeCurrentUser\r\n  const storeLoggedInUser = async (username) => {\r\n    try {\r\n      await AsyncStorage.setItem(\"@logged_in_user\", username);\r\n    } catch (e) {\r\n      // error\r\n    }\r\n    await getLoggedInUser();\r\n  };\r\n  const storeNewUser = async (username, userData) => {\r\n    try {\r\n      let data = JSON.stringify(userData);\r\n      await AsyncStorage.setItem(username, data);\r\n    } catch (e) {}\r\n    try {\r\n      await AsyncStorage.setItem(\"@logged_in_user\", username);\r\n    } catch (e) {}\r\n    try {\r\n      d = await AsyncStorage.getItem(\"@logged_in_user\");\r\n    } catch (e) {}\r\n    await setLoggedInUsername(d);\r\n    await setCurrentUserData(d);\r\n  };\r\n  // START debug //\r\n\r\n  const getAllUsersExceptCurrentUser = async () => {\r\n    let keys = [];\r\n    try {\r\n      keys = await AsyncStorage.getAllKeys();\r\n    } catch (e) {\r\n      // read key error\r\n    }\r\n    let currentUser;\r\n    console.log(keys);\r\n    const index = keys.indexOf(\"@logged_in_user\");\r\n    if (index > -1) {\r\n      keys.splice(index, 1);\r\n    }\r\n    const index2 = keys.indexOf(currentUser);\r\n    console.log(index2);\r\n    if (index2 > -1) {\r\n      keys.splice(index2, 1);\r\n    }\r\n    let obj = [];\r\n    let profilePic;\r\n    await Promise.all(\r\n      keys.map(async (k, i) => {\r\n        try {\r\n          const jsonData = await AsyncStorage.getItem(k);\r\n          const data = JSON.parse(jsonData);\r\n          profilePic = data.profilePic;\r\n        } catch (e) {\r\n          console.log(\"failed loading profile picture\");\r\n        }\r\n        console.log(\"prof pic: \", profilePic);\r\n        console.log(\"key \" + i + \": \" + k);\r\n        obj.push({ username: k, profilePic: profilePic });\r\n      })\r\n    );\r\n    obj.map((i) => {\r\n      console.log(i.username, i.profilePic);\r\n    });\r\n    //setUsers((state) => [...state, ...obj]);\r\n\r\n    //setUsers((state) => [obj2, ...state]);\r\n  };\r\n\r\n  const getUsers = async () => {\r\n    try {\r\n      const users = JSON.parse(await AsyncStorage.getItem(\"users\"));\r\n      if (!users.length) {\r\n        setInitialRoute(\"Login\");\r\n      } else {\r\n        setIsLoggedIn(true);\r\n        setUsers(users);\r\n        setInitialRoute(\"Home\");\r\n      }\r\n    } catch (e) {\r\n      setInitialRoute(\"Login\");\r\n    }\r\n  };\r\n\r\n  const loadApp = async () => {\r\n    // const images = [require('./assets/snack-icon.png')];\r\n\r\n    /*  const cacheImages = images.map(image => {\r\n      return Asset.fromModule(image).downloadAsync();\r\n    });  */\r\n    return getUsers();\r\n  };\r\n\r\n  if (!appLoaded) {\r\n    return (\r\n      <AppLoading\r\n        startAsync={loadApp}\r\n        onFinish={() => {\r\n          //  getAllUsersExceptCurrentUser();\r\n          setAppLoaded(true);\r\n        }}\r\n        onError={() => {}}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <IconRegistry icons={EvaIconsPack} />\r\n      <ApplicationProvider {...eva} theme={eva.light}>\r\n        <NativeBaseProvider theme={theme}>\r\n          <UsersContext.Provider value={[users, setUsers]}>\r\n            <DialogContext.Provider value={[visible, setVisible]}>\r\n              <NavigationContainer>\r\n                <Stack.Navigator initialRouteName={initialRoute}>\r\n                  <Stack.Screen\r\n                    name=\"Home\"\r\n                    options={({ navigation }) => {\r\n                      return {\r\n                        header: () => <HomeScreenHeader />,\r\n                      };\r\n                    }}\r\n                  >\r\n                    {(props) => (\r\n                      <HomeScreen\r\n                        {...props}\r\n                        isLoggedIn={isLoggedIn}\r\n                        loggedInUsername={currentUser}\r\n                        userProfilePic={userProfilePic}\r\n                        token={token}\r\n                        storeNewUser={storeNewUser}\r\n                        storeUser={storeUser}\r\n                      />\r\n                    )}\r\n                  </Stack.Screen>\r\n                  <Stack.Screen name=\"Login\">\r\n                    {(props) => <LoginScreen {...props} />}\r\n                  </Stack.Screen>\r\n                </Stack.Navigator>\r\n              </NavigationContainer>\r\n            </DialogContext.Provider>\r\n          </UsersContext.Provider>\r\n        </NativeBaseProvider>\r\n      </ApplicationProvider>\r\n    </Provider>\r\n  );\r\n}\r\n"],"sourceRoot":""}