{"version":3,"sources":["components/Tasks.js","screens/Homepage2.js","screens/LoginScreen.js","screens/HomeScreen.js","components/HeaderButton.js","styles/theme.js","App.js"],"names":["Tasks","stompClient","loggedInUsername","token","logFromServer","statusMessage","useState","tagLike","setTagLike","tagSave","setTagSave","tagLikeAndSave","setTagLikeAndSave","tagPlanes","setTagPlanes","View","Text","accessibilityRole","TextInput","style","styles","textInput","textAlign","value","placeholder","onChangeText","text","Button","title","onPress","data","username","tag","connected","publish","destination","body","JSON","stringify","alert","StyleSheet","create","height","borderColor","borderWidth","width","marginVertical","colors","root","flex","backgroundColor","container","alignItems","justifyContent","header","toolbar","padding","flexDirection","logo","Homepage2","userProfilePic","isLoggedIn","isConnected","useEffect","getLoggedInUser","getLoggedInUserData","key","a","async","AsyncStorage","getItem","jsonData","parse","setToken","setLoggedInUsername","setUserProfilePic","profilePic","setIsLoggedIn","StatusBar","barStyle","MaterialCommunityIcons","name","size","color","AntDesign","removeItem","clear","console","log","Image","source","uri","LoginScreen","navigation","setUsername","password","setPassword","login","titleText","secureTextEntry","navigate","fontSize","fontWeight","margin","HeaderButton","TouchableOpacity","marginRight","Stack","createStackNavigator","App","appLoaded","setAppLoaded","initialRoute","setInitialRoute","setLogFromServer","setStatusMessage","keys","getAllKeys","getData","setIsConnected","RxStomp","stompConfig","brokerURL","appendMissingNULLonIncoming","forceBinaryWSFrames","debug","str","reconnectDelay","configure","activate","watch","subscribe","message","payload","setItem","storeLoggedInUser","storeData","status","NavigationContainer","Navigator","initialRouteName","Screen","options","headerLeft","headerRight","props","startAsync","onFinish","onError"],"mappings":"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","file":"static/js/app.f55053d2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { StyleSheet, TextInput, Text, View, Button } from \"react-native\";\r\n\r\nexport default function Tasks({\r\n  stompClient,\r\n  loggedInUsername,\r\n  token,\r\n  logFromServer,\r\n  statusMessage,\r\n}) {\r\n  const [tagLike, setTagLike] = useState(\"\");\r\n  const [tagSave, setTagSave] = useState(\"\");\r\n  const [tagLikeAndSave, setTagLikeAndSave] = useState(\"\");\r\n  const [tagPlanes, setTagPlanes] = useState(\"\");\r\n  const [response, setResponse] = useState(\"\");\r\n\r\n  const handleTest = () => {\r\n    stompClient.publish({ destination: \"/app/test\", body: \"\" });\r\n  };\r\n\r\n  const likeByTag = () => {\r\n    if (tagLike !== \"\") {\r\n      const data = { username: loggedInUsername, token: token, tag: tagLike };\r\n      if (stompClient.connected)\r\n        stompClient.publish({\r\n          destination: \"/app/like\",\r\n          body: JSON.stringify(data),\r\n        });\r\n      else alert(\"stomp not ready\");\r\n    } else alert(\"Тег не может быть пустым!\");\r\n  };\r\n  const saveByTag = () => {\r\n    if (tagSave !== \"\") {\r\n      const data = { username: loggedInUsername, token: token, tag: tagSave };\r\n      if (stompClient.connected)\r\n        stompClient.publish({\r\n          destination: \"/app/save\",\r\n          body: JSON.stringify(data),\r\n        });\r\n      else alert(\"stomp not ready\");\r\n    } else alert(\"Тег не может быть пустым!\");\r\n  };\r\n\r\n  const likeAndSave = () => {\r\n    if (tagLikeAndSave !== \"\") {\r\n      //client.send(\"/app/likeandsave\", {}, tag1);\r\n      const data = {\r\n        username: loggedInUsername,\r\n        token: token,\r\n        tag: tagLikeAndSave,\r\n      };\r\n      if (stompClient.connected)\r\n        stompClient.publish({\r\n          destination: \"/app/likeandsave\",\r\n          body: JSON.stringify(data),\r\n        });\r\n      else alert(\"stomp not ready\");\r\n      // stompClient.publish({ destination: \"/app/likeandsave\", body: tag1 });\r\n      //setIsInProgress(true)\r\n    } else alert(\"Тег не может быть пустым!\");\r\n  };\r\n  const sendMediaToGroup = () => {\r\n    if (tagPlanes !== \"\") {\r\n      const data = { username: loggedInUsername, token: token, tag: tagPlanes };\r\n      if (stompClient.connected)\r\n        stompClient.publish({\r\n          destination: \"/app/sendmediatogroup\",\r\n          body: JSON.stringify(data),\r\n        });\r\n      else alert(\"stomp not ready\");\r\n    } else alert(\"Тег не может быть пустым!\");\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <Text accessibilityRole=\"header\">Лайк</Text>\r\n      <TextInput\r\n        style={styles.textInput}\r\n        textAlign=\"center\"\r\n        value={tagLike}\r\n        placeholder=\"Тег\"\r\n        onChangeText={(text) => setTagLike(text)}\r\n      />\r\n      <Button title=\"Старт\" onPress={likeByTag} />\r\n\r\n      <Text accessibilityRole=\"header\">Сохранение</Text>\r\n      <TextInput\r\n        style={styles.textInput}\r\n        textAlign=\"center\"\r\n        value={tagSave}\r\n        placeholder=\"Тег\"\r\n        onChangeText={(text) => setTagSave(text)}\r\n      />\r\n      <Button title=\"Старт\" onPress={saveByTag} />\r\n\r\n      <Text accessibilityRole=\"header\">Лайк + сохранение</Text>\r\n      <TextInput\r\n        style={styles.textInput}\r\n        textAlign=\"center\"\r\n        value={tagLikeAndSave}\r\n        placeholder=\"Тег\"\r\n        onChangeText={(text) => setTagLikeAndSave(text)}\r\n      />\r\n      <Button title=\"Старт\" onPress={likeAndSave} />\r\n\r\n      <Text accessibilityRole=\"header\">Самолет</Text>\r\n      <TextInput\r\n        style={styles.textInput}\r\n        textAlign=\"center\"\r\n        value={tagPlanes}\r\n        placeholder=\"Тег\"\r\n        onChangeText={(text) => setTagPlanes(text)}\r\n      />\r\n      <Button title=\"Старт\" onPress={sendMediaToGroup} />\r\n\r\n      {/*  <Button title=\"Test\" onPress={handleTest} />\r\n      <Text>Response: {response}</Text> */}\r\n      <Text>Log from server: {logFromServer}</Text>\r\n      <Text>Status: {statusMessage}</Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  textInput: {\r\n    height: 40,\r\n    borderColor: \"gray\",\r\n    borderWidth: 1,\r\n    width: \"100%\",\r\n    marginVertical: 10,\r\n  },\r\n});\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  TextInput,\r\n  Text,\r\n  View,\r\n  Button,\r\n  Image,\r\n  StatusBar,\r\n} from \"react-native\";\r\nimport Tasks from \"../components/Tasks\";\r\nimport { MaterialCommunityIcons, AntDesign } from \"@expo/vector-icons\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport * as encoding from \"text-encoding\";\r\n\r\nconst colors = {\r\n  themeColor: \"#E8CEBF\",\r\n  white: \"#fff\",\r\n  background: \"#f4f6fc\",\r\n  greyish: \"#a4a4a4\",\r\n  tint: \"#2b49c3\",\r\n};\r\n\r\nconst Homepage2 = ({\r\n  userProfilePic,\r\n  token,\r\n  loggedInUsername,\r\n  isLoggedIn,\r\n  isConnected,\r\n  stompClient,\r\n  logFromServer,\r\n  statusMessage,\r\n}) => {\r\n  const [cookie, setCookie] = useState(\"\");\r\n\r\n  const [log, setLog] = useState(\"log\");\r\n  const [log2, setLog2] = useState(\"not connected\");\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // getAllKeys();\r\n    getLoggedInUser();\r\n    return () => {};\r\n  }, []);\r\n\r\n  const getLoggedInUserData = async (key) => {\r\n    try {\r\n      const jsonData = await AsyncStorage.getItem(key);\r\n      const data = JSON.parse(jsonData);\r\n      setToken(data.token);\r\n      setLoggedInUsername(key);\r\n      setUserProfilePic(data.profilePic);\r\n    } catch {}\r\n  };\r\n\r\n  const storeLoggedInUser = async (username) => {\r\n    try {\r\n      await AsyncStorage.setItem(\"@logged_in_user\", username);\r\n    } catch (e) {\r\n      // error\r\n    }\r\n    getLoggedInUser(\"logged_in_user\");\r\n  };\r\n  const getLoggedInUser = async () => {\r\n    try {\r\n      const username = await AsyncStorage.getItem(\"@logged_in_user\");\r\n      setIsLoggedIn(true);\r\n      getLoggedInUserData(username);\r\n    } catch {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const storeData = async (key, value) => {\r\n    try {\r\n      let data = JSON.stringify(value);\r\n      await AsyncStorage.setItem(key, data);\r\n    } catch (e) {\r\n      // saving error\r\n    }\r\n    getData(key);\r\n    console.log(\"key: \" + key);\r\n  };\r\n\r\n  const getData = async (key) => {\r\n    try {\r\n      const value = await AsyncStorage.getItem(key);\r\n      if (value !== null) {\r\n        let data = JSON.parse(value);\r\n        console.log(\"data from getData: \" + data);\r\n        setToken(data.token);\r\n        setUserProfilePic(data.userProfilePic);\r\n        console.log(\"token: \" + token);\r\n        console.log(\"upp: \" + userProfilePic);\r\n      }\r\n    } catch (e) {\r\n      // error reading value\r\n    }\r\n  };\r\n\r\n  const deleteCookie = async () => {\r\n    try {\r\n      await AsyncStorage.removeItem(\"@logged_in_user\");\r\n      await AsyncStorage.clear();\r\n    } catch (e) {\r\n      // remove error\r\n    }\r\n    console.log(\"Done.\");\r\n  };\r\n\r\n  const [tag1, setTag1] = useState(\"\");\r\n  const [tag2, setTag2] = useState(\"\");\r\n  const [tag3, setTag3] = useState(\"\");\r\n  const [response, setResponse] = useState(\"\");\r\n\r\n  const likeByTag = () => {\r\n    if (tag1 !== \"\") {\r\n      const data = { username: loggedInUsername, token: token, tag: tag1 };\r\n      if (stompClient.connected)\r\n        stompClient.publish({\r\n          destination: \"/app/like\",\r\n          body: JSON.stringify(data),\r\n        });\r\n      else alert(\"stomp not ready\");\r\n    } else alert(\"Тег не может быть пустым!\");\r\n  };\r\n  const saveByTag = () => {\r\n    if (tag2 !== \"\") {\r\n      const data = { username: loggedInUsername, token: token, tag: tag2 };\r\n      if (stompClient.connected)\r\n        stompClient.publish({\r\n          destination: \"/app/save\",\r\n          body: JSON.stringify(data),\r\n        });\r\n      else alert(\"stomp not ready\");\r\n    } else alert(\"Тег не может быть пустым!\");\r\n  };\r\n\r\n  const likeAndSave = () => {\r\n    if (tag3 !== \"\") {\r\n      //client.send(\"/app/likeandsave\", {}, tag1);\r\n      const data = { username: loggedInUsername, token: token, tag: tag3 };\r\n      if (stompClient.connected)\r\n        stompClient.publish({\r\n          destination: \"/app/likeandsave\",\r\n          body: JSON.stringify(data),\r\n        });\r\n      else alert(\"stomp not ready\");\r\n      // stompClient.publish({ destination: \"/app/likeandsave\", body: tag1 });\r\n      //setIsInProgress(true)\r\n    } else alert(\"Тег не может быть пустым!\");\r\n  };\r\n  const sendMediaToGroup = () => {\r\n    if (tag2 !== \"\") {\r\n      //client.send(\"/app/sendmediatogroup\", {}, tag2);\r\n      stompClient.publish({ destination: \"/app/sendmediatogroup\", body: tag2 });\r\n      //setIsInProgress(true);\r\n    } else alert(\"Тег не может быть пустым!\");\r\n  };\r\n\r\n  return (\r\n    <View style={styles.root}>\r\n      <StatusBar backgroundColor={colors.themeColor} barStyle={\"default\"} />\r\n      <View style={styles.header}>\r\n        <View style={styles.toolbar}>\r\n          <MaterialCommunityIcons\r\n            name=\"text\"\r\n            size={30}\r\n            style={{ color: colors.white }}\r\n          />\r\n          <Text>LikeTime</Text>\r\n          <View style={{ flexDirection: \"row\" }}>\r\n            <AntDesign name=\"user\" size={30} style={{ color: colors.white }} />\r\n          </View>\r\n        </View>\r\n        <View>\r\n          <Text>Text</Text>\r\n        </View>\r\n      </View>\r\n      <View style={styles.container}>\r\n        <Text>StompJS connected: {JSON.stringify(isConnected)}</Text>\r\n\r\n        <Button\r\n          title=\"LOGOUT FROM ALL (deletes all cookies)\"\r\n          onPress={deleteCookie}\r\n        />\r\n        <Text>isLoggedIn: {JSON.stringify(isLoggedIn)}</Text>\r\n        <Text>loggedInUsername: {loggedInUsername}</Text>\r\n        <Text>token: {token}</Text>\r\n        <Image\r\n          style={styles.logo}\r\n          source={userProfilePic ? { uri: userProfilePic } : null}\r\n        />\r\n\r\n        {/* {isLoggedIn && conn && <Tasks stompClient={stompClient} />} */}\r\n        {stompClient.connected && (\r\n          <Tasks\r\n            stompClient={stompClient}\r\n            loggedInUsername={loggedInUsername}\r\n            token={token}\r\n            logFromServer={logFromServer}\r\n            statusMessage={statusMessage}\r\n          />\r\n        )}\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    backgroundColor: colors.themeColor,\r\n  },\r\n  container: {\r\n    flex: 1,\r\n\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  header: {\r\n    backgroundColor: colors.themeColor,\r\n  },\r\n  toolbar: {\r\n    padding: 16,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  textInput: {\r\n    height: 40,\r\n    borderColor: \"gray\",\r\n    borderWidth: 1,\r\n    width: \"50%\",\r\n  },\r\n  logo: {\r\n    width: 60,\r\n    height: 60,\r\n  },\r\n});\r\n\r\nexport default Homepage2;\r\n","import React, { useState } from \"react\";\r\nimport { Button, StyleSheet, Text, TextInput, View } from \"react-native\";\r\n\r\nconst LoginScreen = ({ navigation, stompClient }) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleLogin = () => {\r\n    login(username, password);\r\n    navigation.navigate(\"Home\");\r\n  };\r\n\r\n  const login = async (username, password) => {\r\n    const data = { username: username, password: password };\r\n    if (stompClient.connected)\r\n      stompClient.publish({\r\n        destination: \"/app/auth/login\",\r\n        body: JSON.stringify(data),\r\n      });\r\n    else alert(\"stomp not ready\");\r\n    if (stompClient) console.log(\"works\");\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.titleText}>Авторизация</Text>\r\n      <TextInput\r\n        style={styles.textInput}\r\n        placeholder={\"Имя пользователя\"}\r\n        value={username}\r\n        onChangeText={(text) => {\r\n          setUsername(text);\r\n        }}\r\n      />\r\n      <TextInput\r\n        style={styles.textInput}\r\n        placeholder={\"Пароль\"}\r\n        secureTextEntry={true}\r\n        value={password}\r\n        onChangeText={(text) => {\r\n          setPassword(text);\r\n        }}\r\n      />\r\n      <Button title=\"Войти\" onPress={handleLogin} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default LoginScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n  },\r\n  titleText: {\r\n    fontSize: 30,\r\n    fontWeight: \"bold\",\r\n  },\r\n  textInput: {\r\n    margin: 20,\r\n    height: 40,\r\n    borderColor: \"red\",\r\n    borderWidth: 1,\r\n    width: \"80%\",\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport { Button, StyleSheet, Text, View } from \"react-native\";\r\n\r\nconst HomeScreen = ({ navigation }) => {\r\n  return (\r\n    <View>\r\n      <Text>HomeScreen</Text>\r\n      <Button title=\"Login\" onPress={() => navigation.navigate(\"Login\")} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default HomeScreen;\r\n\r\nconst styles = StyleSheet.create({});\r\n","import React from \"react\";\r\nimport { StyleSheet, Text, View, Image, TouchableOpacity } from \"react-native\";\r\nimport { colors } from \"../styles/theme\";\r\n\r\nconst HeaderButton = ({ username, userProfilePic }) => {\r\n  return (\r\n    <View>\r\n      <TouchableOpacity style={styles.root}>\r\n        <Image\r\n          style={styles.logo}\r\n          source={{\r\n            uri: userProfilePic,\r\n          }}\r\n        />\r\n        <Text style={styles.text}>{username}</Text>\r\n      </TouchableOpacity>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default HeaderButton;\r\n\r\nconst styles = StyleSheet.create({\r\n  root: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-end\",\r\n    alignItems: \"center\",\r\n    height: 50,\r\n    marginRight: 5,\r\n  },\r\n  logo: {\r\n    width: 45,\r\n    height: 45,\r\n    marginRight: 5,\r\n  },\r\n  text: {\r\n    fontSize: 14,\r\n    fontWeight: \"500\",\r\n    color: colors.secondary,\r\n  },\r\n});\r\n","export const colors = {\r\n  primary: \"#fff\",\r\n  secondary: \"#94d82d\",\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { StyleSheet } from \"react-native\";\nimport Homepage2 from \"./screens/Homepage2\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport HeaderButton from \"./components/HeaderButton\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport AppLoading from \"expo-app-loading\";\nimport { RxStomp } from \"@stomp/rx-stomp\";\nimport { throttleTime, map, scan } from \"rxjs/operators\";\nimport * as encoding from \"text-encoding\";\n\nconst Stack = createStackNavigator();\n\nexport default function App() {\n  const [appLoaded, setAppLoaded] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [initialRoute, setInitialRoute] = useState(\"\");\n  const [loggedInUsername, setLoggedInUsername] = useState(\"\");\n  const [userProfilePic, setUserProfilePic] = useState(\"\");\n  const [token, setToken] = useState(\"\");\n\n  const [logFromServer, setLogFromServer] = useState(\"\");\n\n  const [statusMessage, setStatusMessage] = useState(\"\");\n\n  const getLoggedInUser = async () => {\n    try {\n      const username = await AsyncStorage.getItem(\"@logged_in_user\");\n      if (username == null) {\n        setInitialRoute(\"Login\");\n      } else {\n        setIsLoggedIn(true);\n        getLoggedInUserData(username);\n        setInitialRoute(\"Home\");\n      }\n    } catch (e) {\n      alert(\"error\");\n    }\n  };\n\n  const getLoggedInUserData = async (key) => {\n    try {\n      const jsonData = await AsyncStorage.getItem(key);\n      const data = JSON.parse(jsonData);\n      setToken(data.token);\n      setLoggedInUsername(key);\n      setUserProfilePic(data.profilePic);\n    } catch {}\n  };\n\n  /*   useEffect(() => {\n    // getAllKeys();\n    getLoggedInUser();\n    return () => {};\n  }, []); */\n\n  /*   useEffect(() => {\n    if (isLoggedIn) {\n      console.log(JSON.stringify(isLoggedIn));\n      setInitialRoute(\"Home\");\n    }\n  }, [isLoggedIn]); */\n\n  // START debug //\n\n  const getAllKeys = async () => {\n    let keys = [];\n    try {\n      keys = await AsyncStorage.getAllKeys();\n    } catch (e) {\n      // read key error\n    }\n    console.log(keys);\n  };\n\n  useEffect(() => {\n    getAllKeys();\n\n    return () => {};\n  }, []);\n\n  // END debug //\n  const getData = async (key) => {\n    try {\n      const value = await AsyncStorage.getItem(key);\n      if (value !== null) {\n        let data = JSON.parse(value);\n        console.log(\"data from getData: \" + data);\n        setToken(data.token);\n        setUserProfilePic(data.userProfilePic);\n        console.log(\"token: \" + token);\n        console.log(\"upp: \" + userProfilePic);\n      }\n    } catch (e) {\n      // error reading value\n    }\n  };\n  const storeData = async (key, value) => {\n    try {\n      let data = JSON.stringify(value);\n      await AsyncStorage.setItem(key, data);\n    } catch (e) {\n      // saving error\n    }\n    getData(key);\n    console.log(\"key: \" + key);\n  };\n  const storeLoggedInUser = async (username) => {\n    try {\n      await AsyncStorage.setItem(\"@logged_in_user\", username);\n    } catch (e) {\n      // error\n    }\n    getLoggedInUser(\"logged_in_user\");\n  };\n\n  const [isConnected, setIsConnected] = useState(false);\n  const [stompClient, setStompClient] = useState(new RxStomp());\n\n  let subscriptionAuth;\n  let subscriptionStatus;\n  let subscriptionLog;\n  let subscriptionLogin;\n\n  const stompConfig = {\n    brokerURL: \"wss://instanext-server.herokuapp.com/ws\",\n    //brokerURL: \"ws://192.168.100.13:5000/ws\",\n    appendMissingNULLonIncoming: true,\n    forceBinaryWSFrames: true,\n    debug: function (str) {\n      console.log(\"STOMP: \" + str);\n    },\n    reconnectDelay: 10000,\n  };\n  // d\n  useEffect(() => {\n    stompClient.configure(stompConfig);\n    stompClient.activate();\n\n    subscriptionLogin = stompClient\n      .watch(\"/user/notification/login\")\n      .subscribe(function (message) {\n        const payload = JSON.parse(message.body);\n        console.log(payload);\n        if (payload.data.token !== null) {\n          const username = payload.data.username;\n          const token = payload.data.token;\n          const profilePic = payload.data.userProfilePic;\n\n          const data = { token, profilePic };\n          storeLoggedInUser(username);\n          storeData(username, data);\n\n          ///  setStatusMessage(\"token received\");\n          //subscriptionLogin.unsubscribe();\n        }\n      });\n\n    subscriptionStatus = stompClient\n      .watch(\"/user/notification/status\")\n      .subscribe(function (message) {\n        const payload = JSON.parse(message.body);\n        setStatusMessage(payload.status);\n      });\n\n    subscriptionLog = stompClient\n      .watch(\"/user/notification/log\")\n      .subscribe(function (message) {\n        const payload = JSON.parse(message.body);\n        setLogFromServer(payload.status);\n        /* \n\n          let id = listDataLog.listLog.length;\n          const newList = listDataLog.listLog.concat({\n            id: id,\n            message: payload.log,\n          });\n\n          setListDataLog({ ...listDataLog, listLog: newList }); */\n      });\n    setIsConnected(true);\n  }, []);\n\n  // END StompClient //\n\n  const loadApp = async () => {\n    // const images = [require('./assets/snack-icon.png')];\n\n    /*  const cacheImages = images.map(image => {\n      return Asset.fromModule(image).downloadAsync();\n    });  */\n\n    return getLoggedInUser();\n  };\n\n  if (!appLoaded) {\n    return (\n      <AppLoading\n        startAsync={loadApp}\n        onFinish={() => setAppLoaded(true)}\n        onError={() => {}}\n      />\n    );\n  }\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName={initialRoute}>\n        <Stack.Screen\n          name=\"Home\"\n          options={{\n            headerLeft: null,\n            headerRight: (props) => (\n              <HeaderButton\n                username={loggedInUsername}\n                userProfilePic={userProfilePic}\n              />\n            ),\n          }}\n        >\n          {(props) => (\n            <Homepage2\n              {...props}\n              isLoggedIn={isLoggedIn}\n              loggedInUsername={loggedInUsername}\n              userProfilePic={userProfilePic}\n              token={token}\n              isConnected={isConnected}\n              stompClient={stompClient}\n              logFromServer={logFromServer}\n              statusMessage={statusMessage}\n            />\n          )}\n        </Stack.Screen>\n        <Stack.Screen name=\"Login\">\n          {(props) => (\n            <LoginScreen\n              {...props}\n              isConnected={isConnected}\n              stompClient={stompClient}\n            />\n          )}\n        </Stack.Screen>\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n"],"sourceRoot":""}